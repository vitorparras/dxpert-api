// <auto-generated />
using System;
using Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Context.Migrations
{
    [DbContext(typeof(DxContext))]
    [Migration("20230629202500_MigrationInicialBase")]
    partial class MigrationInicialBase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Model.AuthToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AuthToken");
                });

            modelBuilder.Entity("Domain.Model.Beneficiarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CadastroId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DataNasc")
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Beneficiarios");
                });

            modelBuilder.Entity("Domain.Model.Cadastro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AnosContribuicao")
                        .HasColumnType("int");

                    b.Property<string>("Categoria")
                        .HasColumnType("longtext");

                    b.Property<string>("Celular")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ConjugeDataNasc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ConjugeNome")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataCasamento")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DataPosse")
                        .HasColumnType("longtext");

                    b.Property<string>("DespesaMensal")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("EmpresaTrabalho")
                        .HasColumnType("longtext");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("longtext");

                    b.Property<string>("Etapa")
                        .HasColumnType("longtext");

                    b.Property<string>("FilhosMaiores")
                        .HasColumnType("longtext");

                    b.Property<string>("Fuma")
                        .HasColumnType("longtext");

                    b.Property<string>("Fumante")
                        .HasColumnType("longtext");

                    b.Property<string>("HistoricoSeguradora")
                        .HasColumnType("longtext");

                    b.Property<int>("IdUsuarioResponsavel")
                        .HasColumnType("int");

                    b.Property<string>("ImpostoDeRenda")
                        .HasColumnType("longtext");

                    b.Property<string>("MaiorPrioridade")
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<string>("ObrigacoesFiscaisExterior")
                        .HasColumnType("longtext");

                    b.Property<string>("Ocupacao")
                        .HasColumnType("longtext");

                    b.Property<string>("PoliticamenteExposto")
                        .HasColumnType("longtext");

                    b.Property<string>("PossuiAlgumaAtividade")
                        .HasColumnType("longtext");

                    b.Property<string>("PossuiDeficiencia")
                        .HasColumnType("longtext");

                    b.Property<bool?>("PossuiFilhos")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PresidenteNoBrasil")
                        .HasColumnType("longtext");

                    b.Property<string>("ProblemaSaude")
                        .HasColumnType("longtext");

                    b.Property<string>("ProblemasSaude")
                        .HasColumnType("longtext");

                    b.Property<string>("Profissao")
                        .HasColumnType("longtext");

                    b.Property<string>("QuantidadeFilhos")
                        .HasColumnType("longtext");

                    b.Property<int>("QuantidadeFilhosMaiores")
                        .HasColumnType("int");

                    b.Property<string>("QuantidadeSubstancia")
                        .HasColumnType("longtext");

                    b.Property<string>("RealizouCirurgia")
                        .HasColumnType("longtext");

                    b.Property<string>("RegimeContratacao")
                        .HasColumnType("longtext");

                    b.Property<string>("RendaBruta")
                        .HasColumnType("longtext");

                    b.Property<string>("ReservaEmergencia")
                        .HasColumnType("longtext");

                    b.Property<int?>("Sexo")
                        .HasColumnType("int");

                    b.Property<string>("SofreDoencas")
                        .HasColumnType("longtext");

                    b.Property<string>("TempoReserva")
                        .HasColumnType("longtext");

                    b.Property<string>("TipoSubstancia")
                        .HasColumnType("longtext");

                    b.Property<string>("TomaRemedio")
                        .HasColumnType("longtext");

                    b.Property<string>("TotalAplicacoesFinanceiros")
                        .HasColumnType("longtext");

                    b.Property<string>("TotalImoveis")
                        .HasColumnType("longtext");

                    b.Property<string>("TotalVeiculos")
                        .HasColumnType("longtext");

                    b.Property<string>("UsoMedicamento")
                        .HasColumnType("longtext");

                    b.Property<string>("ViagemInternacional")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Cadastros");
                });

            modelBuilder.Entity("Domain.Model.Configuracoes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<string>("Tipo")
                        .HasColumnType("longtext");

                    b.Property<string>("Valor")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Configuracoes");
                });

            modelBuilder.Entity("Domain.Model.Dados.AdicionalDiariaInternacaoHospitalar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<double>("Valor")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("AdicionalDiariaInternacaoHospitalar");

                    b.ToSqlQuery("INSERT INTO AdicionalDiariaInternacaoHospitalar (Idade, Valor) VALUES\r\n                ('16',    '0.12'), \r\n                ('17',    '0.12'), \r\n                ('18',    '0.12'), \r\n                ('19',    '0.12'), \r\n                ('20',    '0.19'), \r\n                ('21',    '0.19'), \r\n                ('22',    '0.19'), \r\n                ('23',    '0.19'), \r\n                ('24',    '0.19'), \r\n                ('25',    '0.19'), \r\n                ('26',    '0.19'), \r\n                ('27',    '0.19'), \r\n                ('28',    '0.19'), \r\n                ('29',    '0.19'), \r\n                ('30',    '0.17'), \r\n                ('31',    '0.17'), \r\n                ('32',    '0.17'), \r\n                ('33',    '0.17'), \r\n                ('34',    '0.17'), \r\n                ('35',    '0.17'), \r\n                ('36',    '0.17'), \r\n                ('37',    '0.17'), \r\n                ('38',    '0.17'), \r\n                ('39',    '0.17'), \r\n                ('40',    '0.29'), \r\n                ('41',    '0.29'), \r\n                ('42',    '0.29'), \r\n                ('43',    '0.29'), \r\n                ('44',    '0.29'), \r\n                ('45',    '0.29'), \r\n                ('46',    '0.29'), \r\n                ('47',    '0.29'), \r\n                ('48',    '0.29'), \r\n                ('49',    '0.29'), \r\n                ('50',    '0.56'), \r\n                ('51',    '0.56'), \r\n                ('52',    '0.56'), \r\n                ('53',    '0.56'), \r\n                ('54',    '0.56'), \r\n                ('55',    '0.56'), \r\n                ('56',    '0.56'), \r\n                ('57',    '0.56'), \r\n                ('58',    '0.56'), \r\n                ('59',    '0.56'), \r\n                ('60',    '1.09'), \r\n                ('61',    '1.09'), \r\n                ('62',    '1.09'), \r\n                ('63',    '1.09'), \r\n                ('64',    '1.09'), \r\n                ('65',    '1.09');");
                });

            modelBuilder.Entity("Domain.Model.Dados.DiariaIncapacidadeTemporariaAcidente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<double>("I13a30")
                        .HasColumnType("double");

                    b.Property<double>("I31a35")
                        .HasColumnType("double");

                    b.Property<double>("I36a40")
                        .HasColumnType("double");

                    b.Property<double>("I41a45")
                        .HasColumnType("double");

                    b.Property<double>("I46a50")
                        .HasColumnType("double");

                    b.Property<double>("I51a55")
                        .HasColumnType("double");

                    b.Property<double>("I56a60")
                        .HasColumnType("double");

                    b.Property<double>("I61a65")
                        .HasColumnType("double");

                    b.Property<double>("InvalidezAcidentalMajorada")
                        .HasColumnType("double");

                    b.Property<double>("MorteAcidental")
                        .HasColumnType("double");

                    b.Property<double>("RendaMensal")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("DiariaIncapacidadeTemporariaAcidente");

                    b.ToSqlQuery("INSERT INTO DiariaIncapacidadeTemporariaAcidente (RendaMensal, MorteAcidental, InvalidezAcidentalMajorada, I13a30, I31a35, I36a40, I41a45, I46a50, I51a55, I56a60, I61a65) VALUES\r\n                (' 750.00',           ' 50.000.00',    ' 50.000.00',       '15.5',       '16.77',      '18.03',      '19.6',       '21.68',          '24.1',              '26.31',      '28.38'),\r\n                 (' 750.00',           ' 75.000.00',    ' 75.000.00',       '21.07',       '22.34',      '23.6',          '25.18',       '27.25',          '29.67',          '31.88',      '33.96'),\r\n                 (' 1.000.00',       ' 50.000.00',    ' 50.000.00',       '16.96',      '18.65',      '20.33',      '22.43',      '25.2',              '28.42',          '31.37',      '34.13'),\r\n                 (' 1.000.00',       ' 100.000.00',    ' 100.000.00',       '28.1',       '29.79',       '31.47',      '33.57',        '36.34',            '39.56',             '42.51',        '45.27'),\r\n                 (' 2.000.00',       ' 20.000.00',    ' 20.000.00',       '16.08',       '19.47',       '22.83',      '27.02',        '32.56',            '39.01',             '44.9 ',        '50.44'),\r\n                 (' 2.000.00',       ' 40.000.00',    ' 40.000.00',       '20.54',       '23.93',       '27.29',      '31.48',        '37.02',            '43.46',             '49.36',        '54.89'),\r\n                 (' 2.000.00',       ' 100.000.00',    ' 100.000.00',       '33.91',       '37.3',         '40.66',      '44.85',        '50.39',            '56.83',             '62.73',        '68.26'),\r\n                 (' 2.000.00',       ' 200.000.00',    ' 200.000.00',       '56.2',       '59.58',       '62.94',      '67.14',        '72.68',            '79.12',             '85.01',        '90.55'),\r\n                 (' 3.000.00',       ' 30.000.00',    ' 30.000.00',       '24.13',       '29.21',       '34.25',      '40.54',        '48.85',            '58.51',             '67.35',        '75.65'),\r\n                 (' 3.000.00',       ' 60.000.00',    ' 60.000.00',       '30.81',       '35.89',       '40.93',      '47.22',        '55.53',            '65.2',             '74.04',        '82.34'),\r\n                 (' 3.000.00',       ' 150.000.00',    ' 150.000.00',       '50.87',       '55.95',       '60.99',      '67.28',        '75.59',            '85.25',             '94.1',        '102.39'),\r\n                 (' 3.000.00',       ' 300.000.00',    ' 300.000.00',       '84.29',       '89.37',       '94.42',      '100.7',        '109.02',          '118.68',           '127.52',       '135.82'),\r\n                 (' 4.000.00',       ' 40.000.00',    ' 40.000.00',       '32.17',       '38.94',       '45.67',      '54.05',        '65.13',            '78.01',             '89.81',        '100.87'),\r\n                 (' 4.000.00',       ' 80.000.00',    ' 80.000.00',       '41.08',       '47.86',       '54.58',      '62.96',        '74.04',            '86.93',             '98.72',        '109.78'),\r\n                 (' 4.000.00',       ' 200.000.00',    ' 200.000.00',       '67.82',       '74.6',         '81.32',      '89.7',         '100.78',          '113.67',           '125.46',       '136.53'),\r\n                 (' 4.000.00',       ' 400.000.00',    ' 400.000.00',       '112.39',       '119.17',       '125.89',      '134.27',       '145.35',          '158.24',           '170.03',       '181.09'),\r\n                 (' 5.000.00',       ' 50.000.00',    ' 50.000.00',       '40.21',       '48.68',       '57.08',      '67.56',        '81.41',            '97.52',           '112.26',       '126.09'),\r\n                 (' 5.000.00',       ' 100.000.00',    ' 100.000.00',       '51.35',       '59.82',       '68.22',      '78.7',         '92.55',            '108.66',           '123.4',       '137.23'),\r\n                 (' 5.000.00',       ' 250.000.00',    ' 250.000.00',       '84.78',       '93.25',       '101.65',      '112.13',       '125.98',          '142.09',           '156.83',       '170.66'),\r\n                 (' 5.000.00',       ' 500.000.00',    ' 500.000.00',       '140.49',       '148.96',       '157.36',      '167.84',       '181.69',          '197.8',            '212.54',       '226.37'),\r\n                 (' 6.000.00',       ' 60.000.00',    ' 60.000.00',       '48.25',       '58.41',       '68.5',          '81.07',        '97.69',            '117.02',           '134.71',       '151.31'),\r\n                 (' 6.000.00',       ' 120.000.00',    ' 120.000.00',       '61.62',       '71.78',       '81.87',      '94.44',        '111.07',          '130.39',           '148.08',       '164.68'),\r\n                 (' 6.000.00',       ' 300.000.00',    ' 300.000.00',       '101.73',       '111.9',        '121.98',      '134.55',       '151.18',          '170.5',            '188.19',       '204.79'),\r\n                 (' 6.000.00',       ' 600.000.00',    ' 600.000.00',       '168.59',       '178.75',       '188.83',      '201.41',       '218.03',          '237.36',           '255.04',       '271.64'),\r\n                 (' 7.000.00',       ' 70.000.00',    ' 70.000.00',       '56.29',       '68.15',       '79.91',      '94.58',        '113.98',          '136.52',           '157.16',       '176.52'),\r\n                 (' 7.000.00',       ' 140.000.00',    ' 140.000.00',       '71.89',       '83.75',       '95.51',      '110.18',       '129.58',          '152.12',           '172.76',       '192.12'),\r\n                 (' 7.000.00',       ' 350.000.00',    ' 350.000.00',       '118.69',       '130.54',       '142.31',      '156.98',       '176.37',          '198.92',           '219.56',       '238.92'),\r\n                 (' 7.000.00',       ' 700.000.00',    ' 700.000.00',       '196.68',       '208.54',       '220.31',      '234.97',       '254.37',          '276.92',           '297.55',       '316.92'),\r\n                 (' 8.000.00',       ' 80.000.00',    ' 80.000.00',       '64.33',       '77.88',       '91.33',      '108.09',       '130.26',          '156.03',           '179.61',       '201.74'),\r\n                 (' 8.000.00',       ' 160.000.00',    ' 160.000.00',       '82.16',       '95.71',       '109.16',      '125.92',       '148.09',          '173.85',           '197.44',       '219.57'),\r\n                 (' 8.000.00',       ' 400.000.00',    ' 400.000.00',       '135.64',       '149.19',       '162.64',      '179.4',        '201.57',          '227.34',           '250.92',       '273.05'),\r\n                 (' 8.000.00',       ' 800.000.00',    ' 800.000.00',       '224.78',       '238.33',       '251.78',      '268.54',       '290.71',          '316.47',           '340.06',       '362.19'),\r\n                 (' 9.000.00',       ' 90.000.00',    ' 90.000.00',       '72.38',       '87.62',       '102.75',      '121.61',       '146.54',          '175.53',           '202.06',       '226.96'),\r\n                 (' 9.000.00',       ' 180.000.00',    ' 180.000.00',       '92.43',       '107.68',       '122.8',      '141.66',       '166.6',          '195.59',           '222.12',       '247.01'),\r\n                 (' 9.000.00',       ' 450.000.00',    ' 450.000.00',       '152.6',       '167.84',       '182.97',      '201.83',       '226.77',          '255.75',           '282.29',       '307.18'),\r\n                 (' 9.000.00',       ' 900.000.00',    ' 900.000.00',       '252.88',       '268.12',       '283.25',      '302.11',       '327.05',          '356.03',           '382.56',       '407.46'),\r\n                 (' 10.000.00',       ' 100.000.00',    ' 100.000.00',        '80.42',      '97.35',      '114.16',       '135.12',      '162.82',          '195.03',          '224.51',      '252.18'),\r\n                 (' 10.000.00',       ' 200.000.00',    ' 200.000.00',        '102.7',      '119.64',      '136.45',       '157.4',      '185.11',          '217.32',          '246.8',      '274.46'),\r\n                 (' 10.000.00',       ' 500.000.00',    ' 500.000.00',        '169.55',      '186.49',      '203.3 ',       '224.25',      '251.96',          '284.17',          '313.65',      '341.31'),\r\n                 (' 10.000.00',       ' 1.000.000.00',    ' 1.000.000.00',    '280.98',      '297.91',     '314.72',      '335.68',       '363.38',          '395.59',          '425.07',      '452.74'),\r\n                 (' 11.000.00',       ' 110.000.00',    ' 110.000.00',        '88.46',      '107.09',     '125.58',      '148.63',       '179.11',          '214.54',          '246.96',      '277.39'),\r\n                 (' 11.000.00',       ' 220.000.00',    ' 220.000.00',        '112.97',      '131.6',      '150.09',      '173.14',       '203.62',          '239.05',          '271.48',      '301.91'),\r\n                 (' 11.000.00',       ' 550.000.00',    ' 550.000.00',        '186.51',      '205.14',     '223.63',      '246.68',       '277.16',          '312.59',          '345.02',      '375.45'),\r\n                 (' 11.000.00',       ' 1.100.000.00',    ' 1.100.000.00',    '309.07',      '327.71',     '346.2',      '369.24',       '399.72',          '435.15',          '467.58',      '498.01'),\r\n                 (' 12.000.00',       ' 120.000.00',    ' 120.000.00',        '96.5',          '116.83',     '137',          '162.14',      '195.39',          '234.04',          '269.42',      '302.61'),\r\n                 (' 12.000.00',       ' 240.000.00',    ' 240.000.00',        '123.24',      '143.57',     '163.74',      '188.88',       '222.13',          '260.78',          '296.16',      '329.35'),\r\n                 (' 12.000.00',       ' 600.000.00',    ' 600.000.00',        '203.47',      '223.79',     '243.96',      '269.11',       '302.35',          '341.01',          '376.38',      '409.58'),\r\n                 (' 12.000.00',       ' 1.200.000.00',    ' 1.200.000.00',    '337.17',      '357.5',      '377.67',      '402.81',       '436.06',          '474.71',          '510.09',      '543.28'),\r\n                 (' 13.000.00',       ' 130.000.00',    ' 130.000.00',        '104.54',      '126.56',       '148.41',       '175.65',      '211.67',          '253.54',          '291.87',      '327.83'),\r\n                 (' 13.000.00',       ' 260.000.00',    ' 260.000.00',        '133.51',      '155.53',       '177.38',       '204.62',      '240.64',          '282.51',          '320.84',      '356.8'),\r\n                 (' 13.000.00',       ' 650.000.00',    ' 650.000.00',        '220.42',      '242.44',       '264.29',       '291.53',      '327.55',          '369.42',          '407.75',      '443.71'),\r\n                 (' 13.000.00',       ' 1.300.000.00',    ' 1.300.000.00',    '365.27',      '387.29',       '409.14',       '436.38',      '472.4',          '514.27',          '552.59',      '588.56'),\r\n                 (' 14.000.00',       ' 140.000.00',    ' 140.000.00',        '112.58',      '136.3',        '159.83',       '189.16',      '227.95',          '273.05',          '314.32',      '353.05'),\r\n                 (' 14.000.00',       ' 280.000.00',    ' 280.000.00',        '143.78',      '167.49',       '191.03',       '220.36',      '259.15',          '304.25',          '345.52',      '384.25'),\r\n                 (' 14.000.00',       ' 700.000.00',    ' 700.000.00',        '237.38',      '261.09',       '284.62',       '313.96',      '352.75',          '397.84',          '439.11',      '477.84'),\r\n                 (' 14.000.00',       ' 1.400.000.00',    ' 1.400.000.00',    '393.37',      '417.08',       '440.61',       '469.95',      '508.74',          '553.83',          '595.1',      '633.83'),\r\n                 (' 15.000.00',       ' 150.000.00',    ' 150.000.00',        '120.63',      '146.03',       '171.25',       '202.68',      '244.24',          '292.55',          '336.77',      '378.26'),\r\n                 (' 15.000.00',       ' 300.000.00',    ' 300.000.00',        '154.05',      '179.46',       '204.67',       '236.1',      '277.66',          '325.98',          '370.2',      '411.69'),\r\n                 (' 15.000.00',       ' 750.000.00',    ' 750.000.00',        '254.33',      '279.74',       '304.95',       '336.38',      '377.94',          '426.26',          '470.48',      '511.97'),\r\n                 (' 15.000.00',       ' 1.500.000.00',    ' 1.500.000.00',    '421.46',      '446.87',       '472.08',       '503.51',      '545.08',          '593.39',          '637.61',      '679.1'),\r\n                 (' 13.000.00',       ' 1.300.000.00',    ' 1.300.000.00',    '365.27',      '387.29',       '409.14',       '436.38',      '472.4',          '514.27',          '552.59',      '588.56'),\r\n                 (' 14.000.00',       ' 140.000.00',    ' 140.000.00',        '112.58',      '136.3',        '159.83',       '189.16',      '227.95',          '273.05',          '314.32',      '353.05'),\r\n                 (' 14.000.00',       ' 280.000.00',    ' 280.000.00',        '143.78',      '167.49',       '191.03',       '220.36',      '259.15',          '304.25',          '345.52',      '384.25'),\r\n                 (' 14.000.00',       ' 700.000.00',    ' 700.000.00',        '237.38',      '261.09',       '284.62',       '313.96',      '352.75',          '397.84',          '439.11',      '477.84'),\r\n                 (' 14.000.00',       ' 1.400.000.00',    ' 1.400.000.00',    '393.37',      '417.08',       '440.61',       '469.95',      '508.74',          '553.83',          '595.1',      '633.83'),\r\n                 (' 15.000.00',       ' 150.000.00',    ' 150.000.00',        '120.63',      '146.03',       '171.25',       '202.68',      '244.24',          '292.55',          '336.77',      '378.26'),\r\n                 (' 15.000.00',       ' 300.000.00',    ' 300.000.00',        '154.05',      '179.46',       '204.67',       '236.1',      '277.66',          '325.98',          '370.2',      '411.69'),\r\n                 (' 15.000.00',       ' 750.000.00',    ' 750.000.00',        '254.33',      '279.74',       '304.95',       '336.38',      '377.94',          '426.26',          '470.48',      '511.97'),\r\n                 (' 15.000.00',       ' 1.500.000.00',    ' 1.500.000.00',    '421.46',      '446.87',       '472.08',       '503.51',      '545.08',          '593.39',          '637.61',      '679.1'),\r\n                 (' 16.000.00',       ' 160.000.00',    ' 160.000.00',        '128.67',      '155.77',       '182.66',       '216.19',      '260.52',          '312.05',          '359.22',      '403.48'),\r\n                 (' 16.000.00',       ' 320.000.00',    ' 320.000.00',        '164.32',      '191.42',       '218.32',       '251.84',      '296.17',          '347.71',          '394.88',      '439.14'),\r\n                 (' 16.000.00',       ' 800.000.00',    ' 800.000.00',        '271.29',      '298.39',       '325.28',       '358.81',      '403.14',          '454.67',          '501.84',      '546.1'),\r\n                 (' 16.000.00',       ' 1.600.000.00',    ' 1.600.000.00',    '449.56',      '476.66',       '503.56',       '537.08',      '581.41',          '632.95',          '680.12',      '724.38'),\r\n                 (' 17.000.00',       ' 170.000.00',    ' 170.000.00',        '136.71',      '165.5',        '194.08',       '229.7',      '276.8',          '331.56',          '381.67',      '428.7'),\r\n                 (' 17.000.00',       ' 340.000.00',    ' 340.000.00',        '174.59',      '203.39',       '231.96',       '267.58',      '314.69',          '369.44',          '419.56',      '466.58'),\r\n                 (' 17.000.00',       ' 850.000.00',    ' 850.000.00',        '288.24',      '317.04',       '345.61',       '381.23',      '428.34',          '483.09',          '533.21',      '580.23'),\r\n                 (' 17.000.00',       ' 1.700.000.00',    ' 1.700.000.00',    '477.66',      '506.45',       '535.03',       '570.65',      '617.75',          '672.51',          '722.62',      '769.65'),\r\n                 (' 18.000.00',       ' 180.000.00',    ' 180.000.00',        '144.75',      '175.24',       '205.49',       '243.21',      '293.08',          '351.06',          '404.12',      '453.92'),\r\n                 (' 18.000.00',       ' 360.000.00',    ' 360.000.00',        '184.86',      '215.35',       '245.61',       '283.32',      '333.2',          '391.17',          '444.24',      '494.03'),\r\n                 (' 18.000.00',       ' 900.000.00',    ' 900.000.00',        '305.2',      '335.69',       '365.94',       '403.66',      '453.53',          '511.51',          '564.57',      '614.37'),\r\n                 (' 18.000.00',       ' 1.800.000.00',    ' 1.800.000.00',    '505.76',      '536.25',       '566.5',        '604.22',      '654.09',          '712.07',          '765.13',      '814.92'),\r\n                 (' 19.000.00',       ' 190.000.00',    ' 190.000.00',        '152.79',      '184.97',       '216.91',       '256.72',      '309.37',          '370.57',          '426.57',      '479.14'),\r\n                 (' 19.000.00',       ' 380.000.00',    ' 380.000.00',        '195.13',      '227.31',       '259.25',       '299.06',      '351.71',          '412.91',          '468.91',      '521.48'),\r\n                 (' 19.000.00',       ' 950.000.00',    ' 950.000.00',        '322.15',      '354.34',       '386.27',       '426.08',      '478.73',          '539.93',          '595.94',      '648.5'),\r\n                 (' 19.000.00',       ' 1.900.000.00',    ' 1.900.000.00',    '533.85',      '566.04',       '597.97',       '637.78',      '690.43',          '751.63',          '807.64',      '860.2'),\r\n                 (' 20.000.00',       ' 200.000.00',    ' 200.000.00',        '160.83',      '194.71',       '228.33',       '270.23',      '325.65',          '390.07',          '449.03',      '504.35'),\r\n                 (' 20.000.00',       ' 400.000.00',    ' 400.000.00',        '205.4',      '239.28',       '272.9',        '314.8',      '370.22',          '434.64',          '493.59',      '548.92'),\r\n                 (' 20.000.00',       ' 1.000.000.00',    ' 1.000.000.00',    '339.11',      '372.98',       '406.6',        '448.51',      '503.92',          '568.34',          '627.3',      '682.63'),\r\n                 (' 20.000.00',       ' 2.000.000.00',    ' 2.000.000.00',    '561.95',      '595.83',       '629.45',       '671.35',      '726.77',          '791.19',          '850.14',      '905.47'),\r\n                 (' 21.000.00',       ' 210.000.00',    ' 210.000.00',        '168.88',      '204.45',       '239.74',       '283.75',      '341.93',          '409.57',          '471.48',      '529.57'),\r\n                 (' 21.000.00',       ' 420.000.00',    ' 420.000.00',        '215.67',      '251.24',       '286.54',       '330.54',      '388.73',          '456.37',          '518.27',      '576.37'),\r\n                 (' 21.000.00',       ' 1.050.000.00',    ' 1.050.000.00',    '356.06',      '391.63',       '426.93',       '470.93',      '529.12',          '596.76',          '658.67',      '716.76'),\r\n                 (' 21.000.00',       ' 2.100.000.00',    ' 2.100.000.00',    '590.05',      '625.62',       '660.92',       '704.92',      '763.11',          '830.75',          '892.65',      '950.75'),\r\n                 (' 22.000.00',       ' 220.000.00',    ' 220.000.00',        '176.92',      '214.18',       '251.16',       '297.26',      '358.21',          '429.08',          '493.93',      '554.79'),\r\n                 (' 22.000.00',       ' 440.000.00',    ' 440.000.00',        '225.94',      '263.21',       '300.19',       '346.28',      '407.24',          '478.1',          '542.95',      '603.81'),\r\n                 (' 22.000.00',       ' 1.100.000.00',    ' 1.100.000.00',    '373.02',      '410.28',       '447.26',       '493.36',      '554.32',          '625.18',          '690.03',      '750.89'),\r\n                 (' 22.000.00',       ' 2.200.000.00',    ' 2.200.000.00',    '618.15',      '655.41',       '692.39',       '738.49',      '799.44',          '870.31',          '935.16',      '996.02'),\r\n                 (' 23.000.00',       ' 230.000.00',    ' 230.000.00',        '184.96',      '223.92',       '262.58',       '310.77',      '374.5',          '448.58',          '516.38',      '580.01'),\r\n                 (' 23.000.00',       ' 460.000.00',    ' 460.000.00',        '236.21',      '275.17',       '313.83',       '362.02',      '425.75',          '499.83',          '567.63',      '631.26'),\r\n                 (' 23.000.00',       ' 1.150.000.00',    ' 1.150.000.00',    '389.97',      '428.93',       '467.59',       '515.79',      '579.51',          '653.59',          '721.4',      '785.02'),\r\n                 (' 23.000.00',       ' 2.300.000.00',    ' 2.300.000.00',    '646.24',      '685.2',        '723.86',       '772.06',      '835.78',          '909.86',          '977.67',      '1041.29'),\r\n                 (' 24.000.00',       ' 240.000.00',    ' 240.000.00',        '193',          '233.65',      '273.99',      '324.28',      '390.78',          '468.08',          '538.83',      '605.22'),      \r\n                 (' 24.000.00',       ' 480.000.00',    ' 480.000.00',        '246.48',      '287.13',       '327.48',       '377.76',      '444.26',          '521.56',          '592.31',      '658.71'),\r\n                 (' 24.000.00',       ' 1.200.000.00',    ' 1.200.000.00',    '406.93',      '447.58',       '487.92',       '538.21',      '604.71',          '682.01',          '752.76',      '819.15'),\r\n                 (' 24.000.00',       ' 2.400.000.00',    ' 2.400.000.00',    '674.34',      '714.99',       '755.34',       '805.62',      '872.12',          '949.42',          '1020.17',      '1086.57'),\r\n                 (' 25.000.00',       ' 250.000.00',    ' 250.000.00',        '201.04',      '243.39',       '285.41',       '337.79',      '407.06',          '487.59',          '561.28',      '630.44'),\r\n                 (' 25.000.00',       ' 500.000.00',    ' 500.000.00',        '256.75',      '299.1',        '341.12',       '393.5',      '462.77',          '543.3',          '616.99',      '686.15'),\r\n                 (' 25.000.00',       ' 1.250.000.00',    ' 1.250.000.00',    '423.89',      '466.23',       '508.25',       '560.64',      '629.91',          '710.43',          '784.13',      '853.29'),\r\n                 (' 25.000.00',       ' 2.500.000.00',    ' 2.500.000.00',    '702.44',      '744.79',       '786.81',       '839.19',      '908.46',          '988.98',          '1062.68',      '1131.84'),\r\n                 (' 26.000.00',       ' 260.000.00',    ' 260.000.00',        '209.08',      '253.12',       '296.83',       '351.3',      '423.34',          '507.09',          '583.73',      '655.66'),\r\n                 (' 26.000.00',       ' 520.000.00',    ' 520.000.00',        '267.02',      '311.06',       '354.76',       '409.24',      '481.28',          '565.03',          '641.67',      '713.6'),\r\n                 (' 26.000.00',       ' 1.300.000.00',    ' 1.300.000.00',    '440.84',      '484.88',       '528.58',       '583.06',      '655.1',          '738.85',          '815.49',      '887.42'),\r\n                 (' 26.000.00',       ' 2.600.000.00',    ' 2.600.000.00',    '730.54',      '774.58',       '818.28',       '872.76',      '944.8',          '1028.54',          '1105.19',      '1177.11'),\r\n                 (' 27.000.00',       ' 270.000.00',    ' 270.000.00',        '217.13',      '262.86',       '308.24',       '364.82',      '439.63',          '526.59',          '606.18',      '680.88'),\r\n                 (' 27.000.00',       ' 540.000.00',    ' 540.000.00',        '277.29',      '323.03',       '368.41',       '424.98',      '499.79',          '586.76',          '666.35',      '741.04'),\r\n                 (' 27.000.00',       ' 1.350.000.00',    ' 1.350.000.00',    '457.8',      '503.53',       '548.91',       '605.49',      '680.3',          '767.26',          '846.86',      '921.55'),\r\n                 (' 27.000.00',       ' 2.700.000.00',    ' 2.700.000.00',    '758.64',      '804.37',       '849.75',       '906.33',      '981.14',          '1068.1',          '1147.69',      '1222.39'),\r\n                 (' 28.000.00',       ' 280.000.00',    ' 280.000.00',        '225.17',      '272.59',       '319.66',       '378.33',      '455.91',          '546.1',          '628.64',      '706.09'),\r\n                 (' 28.000.00',       ' 560.000.00',    ' 560.000.00',        '287.56',      '334.99',       '382.05',       '440.72',      '518.31',          '608.49',          '691.03',      '768.49'),\r\n                 (' 28.000.00',       ' 1.400.000.00',    ' 1.400.000.00',    '474.75',      '522.18',       '569.24',       '627.91',      '705.49',          '795.68',          '878.22',      '955.68'),\r\n                 (' 28.000.00',       ' 2.800.000.00',    ' 2.800.000.00',    '786.73',      '834.16',       '881.22',       '939.89',      '1017.47',          '1107.66',          '1190.2',      '1267.66'),\r\n                 (' 29.000.00',       ' 290.000.00',    ' 290.000.00',        '233.21',      '282.33',       '331.07',       '391.84',      '472.19',          '565.6',          '651.09',      '731.31'),\r\n                 (' 29.000.00',       ' 580.000.00',    ' 580.000.00',        '297.83',      '346.95',       '395.7',        '456.46',      '536.82',          '630.22',          '715.71',      '795.94'),\r\n                 (' 29.000.00',       ' 1.450.000.00',    ' 1.450.000.00',    '491.71',      '540.83',       '589.57',       '650.34',      '730.69',          '824.1',          '909.59',      '989.81'),\r\n                 (' 29.000.00',       ' 2.900.000.00',    ' 2.900.000.00',    '814.83',      '863.95',       '912.7',        '973.46',      '1053.81',          '1147.22',          '1232.71',      '1312.93'),\r\n                 (' 30.000.00',       ' 300.000.00',    ' 300.000.00',        '241.25',      '292.06',       '342.49',       '405.35',      '488.47',          '585.1',          '673.54',      '756.53'),\r\n                 (' 30.000.00',       ' 600.000.00',    ' 600.000.00',        '308.1',      '358.92',       '409.34',       '472.2',      '555.33',          '651.96',          '740.39',      '823.38'),\r\n                 (' 30.000.00',       ' 1.500.000.00',    ' 1.500.000.00',    '508.66',      '559.48',       '609.9',        '672.76',      '755.89',          '852.51',          '940.95',      '1023.94'),\r\n                 (' 30.000.00',       ' 3.000.000.00',    ' 3.000.000.00',    '842.93',      '893.74',       '944.17',       '1007.03',      '1090.15',          '1186.78',          '1275.22',      '1358.21');");
                });

            modelBuilder.Entity("Domain.Model.Dados.DiariaInternacaoHospitalar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<double>("T150")
                        .HasColumnType("double");

                    b.Property<double>("T200")
                        .HasColumnType("double");

                    b.Property<double>("T250")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("DiariaInternacaoHospitalar");

                    b.ToSqlQuery("INSERT INTO DiariaInternacaoHospitalar (Idade, T150, T200, T250) VALUES\r\n                    ('16',  '3.07',  '3.17',      '3.33'),\r\n                    ('17',  '3.07',  '3.17',      '3.33'),\r\n                    ('18',  '3.07',  '3.17',      '3.33'),\r\n                    ('19',  '3.07',  '3.17',      '3.33'),\r\n                    ('20',  '4.74',  '5.06',      '5.52'),\r\n                    ('21',  '4.74',  '5.06',      '5.52'),\r\n                    ('22',  '4.74',  '5.06',      '5.52'),\r\n                    ('23',  '4.74',  '5.06',      '5.52'),\r\n                    ('24',  '4.74',  '5.06',      '5.52'),\r\n                    ('25',  '4.74',  '5.06',      '5.52'),\r\n                    ('26',  '4.74',  '5.06',      '5.52'),\r\n                    ('27',  '4.74',  '5.06',      '5.52'),\r\n                    ('28',  '4.74',  '5.06',      '5.52'),\r\n                    ('29',  '4.74',  '5.06',      '5.52'),\r\n                    ('30',  '6.12',  '6.69',      '7.46'),\r\n                    ('31',  '6.12',  '6.69',      '7.46'),\r\n                    ('32',  '6.12',  '6.69',      '7.46'),\r\n                    ('33',  '6.12',  '6.69',      '7.46'),\r\n                    ('34',  '6.12',  '6.69',      '7.46'),\r\n                    ('35',  '6.12',  '6.69',      '7.46'),\r\n                    ('36',  '6.12',  '6.69',      '7.46'),\r\n                    ('37',  '6.12',  '6.69',      '7.46'),\r\n                    ('38',  '6.12',  '6.69',      '7.46'),\r\n                    ('39',  '6.12',  '6.69',      '7.46'),\r\n                    ('40',  '9.07',  '9.95',      '11.12'),\r\n                    ('41',  '9.07',  '9.95',      '11.12'),\r\n                    ('42',  '9.07',  '9.95',      '11.12'),\r\n                    ('43',  '9.07',  '9.95',      '11.12'),\r\n                    ('44',  '9.07',  '9.95',      '11.12'),\r\n                    ('45',  '9.07',  '9.95',      '11.12'),\r\n                    ('46',  '9.07',  '9.95',      '11.12'),\r\n                    ('47',  '9.07',  '9.95',      '11.12'),\r\n                    ('48',  '9.07',  '9.95',      '11.12'),\r\n                    ('49',  '9.07',  '9.95',      '11.12'),\r\n                    ('50',  '11.98',  '13.1',      '14.6'),\r\n                    ('51',  '11.98',  '13.1',      '14.6'),\r\n                    ('52',  '11.98',  '13.1',      '14.6'),\r\n                    ('53',  '11.98',  '13.1',      '14.6'),\r\n                    ('54',  '11.98',  '13.1',      '14.6'),\r\n                    ('55',  '11.98',  '13.1',      '14.6'),\r\n                    ('56',  '11.98',  '13.1',      '14.6'),\r\n                    ('57',  '11.98',  '13.1',      '14.6'),\r\n                    ('58',  '11.98',  '13.1',      '14.6'),\r\n                    ('59',  '11.98',  '13.1',      '14.6'),\r\n                    ('60',  '17.47',  '18.73',      '20.45'),\r\n                    ('61',  '17.47',  '18.73',      '20.45'),\r\n                    ('62',  '17.47',  '18.73',      '20.45'),\r\n                    ('63',  '17.47',  '18.73',      '20.45'),\r\n                    ('64',  '17.47',  '18.73',      '20.45'),\r\n                    ('65',  '17.47',  '18.73',      '20.45');");
                });

            modelBuilder.Entity("Domain.Model.Dados.DitMedico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<double>("V1")
                        .HasColumnType("double");

                    b.Property<double>("V10")
                        .HasColumnType("double");

                    b.Property<double>("V11")
                        .HasColumnType("double");

                    b.Property<double>("V12")
                        .HasColumnType("double");

                    b.Property<double>("V13")
                        .HasColumnType("double");

                    b.Property<double>("V14")
                        .HasColumnType("double");

                    b.Property<double>("V15")
                        .HasColumnType("double");

                    b.Property<double>("V16")
                        .HasColumnType("double");

                    b.Property<double>("V17")
                        .HasColumnType("double");

                    b.Property<double>("V18")
                        .HasColumnType("double");

                    b.Property<double>("V19")
                        .HasColumnType("double");

                    b.Property<double>("V2")
                        .HasColumnType("double");

                    b.Property<double>("V20")
                        .HasColumnType("double");

                    b.Property<double>("V21")
                        .HasColumnType("double");

                    b.Property<double>("V22")
                        .HasColumnType("double");

                    b.Property<double>("V23")
                        .HasColumnType("double");

                    b.Property<double>("V24")
                        .HasColumnType("double");

                    b.Property<double>("V25")
                        .HasColumnType("double");

                    b.Property<double>("V26")
                        .HasColumnType("double");

                    b.Property<double>("V27")
                        .HasColumnType("double");

                    b.Property<double>("V28")
                        .HasColumnType("double");

                    b.Property<double>("V29")
                        .HasColumnType("double");

                    b.Property<double>("V3")
                        .HasColumnType("double");

                    b.Property<double>("V30")
                        .HasColumnType("double");

                    b.Property<double>("V4")
                        .HasColumnType("double");

                    b.Property<double>("V5")
                        .HasColumnType("double");

                    b.Property<double>("V6")
                        .HasColumnType("double");

                    b.Property<double>("V7")
                        .HasColumnType("double");

                    b.Property<double>("V8")
                        .HasColumnType("double");

                    b.Property<double>("V9")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("DitMedico");

                    b.ToSqlQuery("INSERT INTO DitMedico(Idade,V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16,V17,V18,V19,V20,V21,V22,V23,V24,V25,V26,V27,V28,V29,V30) VALUES\r\n                            ('16',  '11.68',  '23.37',  '35.05',  '46.73',  '58.42',  '70.10',  '81.79',  '93.47',  '105.15',  '116.84',  '128.52',  '140.20',  '151.89',  '163.57',  '175.25',  '186.94',  '198.62',  '210.31',  '221.99',  '233.67',  '245.36',  '257.04',  '268.72',  '280.41',  '292.09',  '303.77',  '315.46',  '327.14',  '338.83',  '350.51'),\r\n                            ('17',  '11.68',  '23.37',  '35.05',  '46.73',  '58.42',  '70.10',  '81.79',  '93.47',  '105.15',  '116.84',  '128.52',  '140.20',  '151.89',  '163.57',  '175.25',  '186.94',  '198.62',  '210.31',  '221.99',  '233.67',  '245.36',  '257.04',  '268.72',  '280.41',  '292.09',  '303.77',  '315.46',  '327.14',  '338.83',  '350.51'),\r\n                            ('18',  '11.68',  '23.37',  '35.05',  '46.73',  '58.42',  '70.10',  '81.79',  '93.47',  '105.15',  '116.84',  '128.52',  '140.20',  '151.89',  '163.57',  '175.25',  '186.94',  '198.62',  '210.31',  '221.99',  '233.67',  '245.36',  '257.04',  '268.72',  '280.41',  '292.09',  '303.77',  '315.46',  '327.14',  '338.83',  '350.51'),\r\n                            ('19',  '11.68',  '23.37',  '35.05',  '46.73',  '58.42',  '70.10',  '81.79',  '93.47',  '105.15',  '116.84',  '128.52',  '140.20',  '151.89',  '163.57',  '175.25',  '186.94',  '198.62',  '210.31',  '221.99',  '233.67',  '245.36',  '257.04',  '268.72',  '280.41',  '292.09',  '303.77',  '315.46',  '327.14',  '338.83',  '350.51'),\r\n                            ('20',  '11.68',  '23.37',  '35.05',  '46.73',  '58.42',  '70.10',  '81.79',  '93.47',  '105.15',  '116.84',  '128.52',  '140.20',  '151.89',  '163.57',  '175.25',  '186.94',  '198.62',  '210.31',  '221.99',  '233.67',  '245.36',  '257.04',  '268.72',  '280.41',  '292.09',  '303.77',  '315.46',  '327.14',  '338.83',  '350.51'),\r\n                            ('21',  '11.68',  '23.37',  '35.05',  '46.73',  '58.42',  '70.10',  '81.79',  '93.47',  '105.15',  '116.84',  '128.52',  '140.20',  '151.89',  '163.57',  '175.25',  '186.94',  '198.62',  '210.31',  '221.99',  '233.67',  '245.36',  '257.04',  '268.72',  '280.41',  '292.09',  '303.77',  '315.46',  '327.14',  '338.83',  '350.51'),\r\n                            ('22',  '11.68',  '23.37',  '35.05',  '46.73',  '58.42',  '70.10',  '81.79',  '93.47',  '105.15',  '116.84',  '128.52',  '140.20',  '151.89',  '163.57',  '175.25',  '186.94',  '198.62',  '210.31',  '221.99',  '233.67',  '245.36',  '257.04',  '268.72',  '280.41',  '292.09',  '303.77',  '315.46',  '327.14',  '338.83',  '350.51'),\r\n                            ('23',  '11.68',  '23.37',  '35.05',  '46.73',  '58.42',  '70.10',  '81.79',  '93.47',  '105.15',  '116.84',  '128.52',  '140.20',  '151.89',  '163.57',  '175.25',  '186.94',  '198.62',  '210.31',  '221.99',  '233.67',  '245.36',  '257.04',  '268.72',  '280.41',  '292.09',  '303.77',  '315.46',  '327.14',  '338.83',  '350.51'),\r\n                            ('24',  '11.68',  '23.37',  '35.05',  '46.73',  '58.42',  '70.10',  '81.79',  '93.47',  '105.15',  '116.84',  '128.52',  '140.20',  '151.89',  '163.57',  '175.25',  '186.94',  '198.62',  '210.31',  '221.99',  '233.67',  '245.36',  '257.04',  '268.72',  '280.41',  '292.09',  '303.77',  '315.46',  '327.14',  '338.83',  '350.51'),\r\n                            ('25',  '11.68',  '23.37',  '35.05',  '46.73',  '58.42',  '70.10',  '81.79',  '93.47',  '105.15',  '116.84',  '128.52',  '140.20',  '151.89',  '163.57',  '175.25',  '186.94',  '198.62',  '210.31',  '221.99',  '233.67',  '245.36',  '257.04',  '268.72',  '280.41',  '292.09',  '303.77',  '315.46',  '327.14',  '338.83',  '350.51'),\r\n                            ('26',  '11.68',  '23.37',  '35.05',  '46.73',  '58.42',  '70.10',  '81.79',  '93.47',  '105.15',  '116.84',  '128.52',  '140.20',  '151.89',  '163.57',  '175.25',  '186.94',  '198.62',  '210.31',  '221.99',  '233.67',  '245.36',  '257.04',  '268.72',  '280.41',  '292.09',  '303.77',  '315.46',  '327.14',  '338.83',  '350.51'),\r\n                            ('27',  '11.68',  '23.37',  '35.05',  '46.73',  '58.42',  '70.10',  '81.79',  '93.47',  '105.15',  '116.84',  '128.52',  '140.20',  '151.89',  '163.57',  '175.25',  '186.94',  '198.62',  '210.31',  '221.99',  '233.67',  '245.36',  '257.04',  '268.72',  '280.41',  '292.09',  '303.77',  '315.46',  '327.14',  '338.83',  '350.51'),\r\n                            ('28',  '11.68',  '23.37',  '35.05',  '46.73',  '58.42',  '70.10',  '81.79',  '93.47',  '105.15',  '116.84',  '128.52',  '140.20',  '151.89',  '163.57',  '175.25',  '186.94',  '198.62',  '210.31',  '221.99',  '233.67',  '245.36',  '257.04',  '268.72',  '280.41',  '292.09',  '303.77',  '315.46',  '327.14',  '338.83',  '350.51'),\r\n                            ('29',  '11.68',  '23.37',  '35.05',  '46.73',  '58.42',  '70.10',  '81.79',  '93.47',  '105.15',  '116.84',  '128.52',  '140.20',  '151.89',  '163.57',  '175.25',  '186.94',  '198.62',  '210.31',  '221.99',  '233.67',  '245.36',  '257.04',  '268.72',  '280.41',  '292.09',  '303.77',  '315.46',  '327.14',  '338.83',  '350.51'),\r\n                            ('30',  '11.68',  '23.37',  '35.05',  '46.73',  '58.42',  '70.10',  '81.79',  '93.47',  '105.15',  '116.84',  '128.52',  '140.20',  '151.89',  '163.57',  '175.25',  '186.94',  '198.62',  '210.31',  '221.99',  '233.67',  '245.36',  '257.04',  '268.72',  '280.41',  '292.09',  '303.77',  '315.46',  '327.14',  '338.83',  '350.51'),\r\n                            ('31',  '14.57',  '29.14',  '43.71',  '58.27',  '72.84',  '87.41',  '101.98',  '116.55',  '131.12',  '145.68',  '160.25',  '174.82',  '189.39',  '203.96',  '218.53',  '233.09',  '247.66',  '262.23',  '276.80',  '291.37',  '305.94',  '320.50',  '335.07',  '349.64',  '364.21',  '378.78',  '393.35',  '407.91',  '422.48',  '437.05'),\r\n                            ('32',  '14.57',  '29.14',  '43.71',  '58.27',  '72.84',  '87.41',  '101.98',  '116.55',  '131.12',  '145.68',  '160.25',  '174.82',  '189.39',  '203.96',  '218.53',  '233.09',  '247.66',  '262.23',  '276.80',  '291.37',  '305.94',  '320.50',  '335.07',  '349.64',  '364.21',  '378.78',  '393.35',  '407.91',  '422.48',  '437.05'),\r\n                            ('33',  '14.57',  '29.14',  '43.71',  '58.27',  '72.84',  '87.41',  '101.98',  '116.55',  '131.12',  '145.68',  '160.25',  '174.82',  '189.39',  '203.96',  '218.53',  '233.09',  '247.66',  '262.23',  '276.80',  '291.37',  '305.94',  '320.50',  '335.07',  '349.64',  '364.21',  '378.78',  '393.35',  '407.91',  '422.48',  '437.05'),\r\n                            ('34',  '14.57',  '29.14',  '43.71',  '58.27',  '72.84',  '87.41',  '101.98',  '116.55',  '131.12',  '145.68',  '160.25',  '174.82',  '189.39',  '203.96',  '218.53',  '233.09',  '247.66',  '262.23',  '276.80',  '291.37',  '305.94',  '320.50',  '335.07',  '349.64',  '364.21',  '378.78',  '393.35',  '407.91',  '422.48',  '437.05'),\r\n                            ('35',  '14.57',  '29.14',  '43.71',  '58.27',  '72.84',  '87.41',  '101.98',  '116.55',  '131.12',  '145.68',  '160.25',  '174.82',  '189.39',  '203.96',  '218.53',  '233.09',  '247.66',  '262.23',  '276.80',  '291.37',  '305.94',  '320.50',  '335.07',  '349.64',  '364.21',  '378.78',  '393.35',  '407.91',  '422.48',  '437.05'),\r\n                            ('36',  '17.43',  '34.86',  '52.29',  '69.72',  '87.16',  '104.59',  '122.02',  '139.45',  '156.88',  '174.31',  '191.74',  '209.17',  '226.60',  '244.04',  '261.47',  '278.90',  '296.33',  '313.76',  '331.19',  '348.62',  '366.05',  '383.48',  '400.92',  '418.35',  '435.78',  '453.21',  '470.64',  '488.07',  '505.50',  '522.93'),\r\n                            ('37',  '17.43',  '34.86',  '52.29',  '69.72',  '87.16',  '104.59',  '122.02',  '139.45',  '156.88',  '174.31',  '191.74',  '209.17',  '226.60',  '244.04',  '261.47',  '278.90',  '296.33',  '313.76',  '331.19',  '348.62',  '366.05',  '383.48',  '400.92',  '418.35',  '435.78',  '453.21',  '470.64',  '488.07',  '505.50',  '522.93'),\r\n                            ('38',  '17.43',  '34.86',  '52.29',  '69.72',  '87.16',  '104.59',  '122.02',  '139.45',  '156.88',  '174.31',  '191.74',  '209.17',  '226.60',  '244.04',  '261.47',  '278.90',  '296.33',  '313.76',  '331.19',  '348.62',  '366.05',  '383.48',  '400.92',  '418.35',  '435.78',  '453.21',  '470.64',  '488.07',  '505.50',  '522.93'),\r\n                            ('39',  '17.43',  '34.86',  '52.29',  '69.72',  '87.16',  '104.59',  '122.02',  '139.45',  '156.88',  '174.31',  '191.74',  '209.17',  '226.60',  '244.04',  '261.47',  '278.90',  '296.33',  '313.76',  '331.19',  '348.62',  '366.05',  '383.48',  '400.92',  '418.35',  '435.78',  '453.21',  '470.64',  '488.07',  '505.50',  '522.93'),\r\n                            ('40',  '17.43',  '34.86',  '52.29',  '69.72',  '87.16',  '104.59',  '122.02',  '139.45',  '156.88',  '174.31',  '191.74',  '209.17',  '226.60',  '244.04',  '261.47',  '278.90',  '296.33',  '313.76',  '331.19',  '348.62',  '366.05',  '383.48',  '400.92',  '418.35',  '435.78',  '453.21',  '470.64',  '488.07',  '505.50',  '522.93'),\r\n                            ('41',  '21.00',  '42.00',  '63.00',  '84.00',  '105.00',  '126.00',  '147.00',  '168.00',  '189.00',  '210.00',  '231.00',  '252.00',  '273.00',  '294.00',  '315.00',  '335.99',  '356.99',  '377.99',  '398.99',  '419.99',  '440.99',  '461.99',  '482.99',  '503.99',  '524.99',  '545.99',  '566.99',  '587.99',  '608.99',  '629.99'),\r\n                            ('42',  '21.00',  '42.00',  '63.00',  '84.00',  '105.00',  '126.00',  '147.00',  '168.00',  '189.00',  '210.00',  '231.00',  '252.00',  '273.00',  '294.00',  '315.00',  '335.99',  '356.99',  '377.99',  '398.99',  '419.99',  '440.99',  '461.99',  '482.99',  '503.99',  '524.99',  '545.99',  '566.99',  '587.99',  '608.99',  '629.99'),\r\n                            ('43',  '21.00',  '42.00',  '63.00',  '84.00',  '105.00',  '126.00',  '147.00',  '168.00',  '189.00',  '210.00',  '231.00',  '252.00',  '273.00',  '294.00',  '315.00',  '335.99',  '356.99',  '377.99',  '398.99',  '419.99',  '440.99',  '461.99',  '482.99',  '503.99',  '524.99',  '545.99',  '566.99',  '587.99',  '608.99',  '629.99'),\r\n                            ('44',  '21.00',  '42.00',  '63.00',  '84.00',  '105.00',  '126.00',  '147.00',  '168.00',  '189.00',  '210.00',  '231.00',  '252.00',  '273.00',  '294.00',  '315.00',  '335.99',  '356.99',  '377.99',  '398.99',  '419.99',  '440.99',  '461.99',  '482.99',  '503.99',  '524.99',  '545.99',  '566.99',  '587.99',  '608.99',  '629.99'),\r\n                            ('45',  '21.00',  '42.00',  '63.00',  '84.00',  '105.00',  '126.00',  '147.00',  '168.00',  '189.00',  '210.00',  '231.00',  '252.00',  '273.00',  '294.00',  '315.00',  '335.99',  '356.99',  '377.99',  '398.99',  '419.99',  '440.99',  '461.99',  '482.99',  '503.99',  '524.99',  '545.99',  '566.99',  '587.99',  '608.99',  '629.99'),\r\n                            ('46',  '25.72',  '51.44',  '77.16',  '102.87',  '128.59',  '154.31',  '180.03',  '205.75',  '231.47',  '257.19',  '282.90',  '308.62',  '334.34',  '360.06',  '385.78',  '411.50',  '437.22',  '462.93',  '488.65',  '514.37',  '540.09',  '565.81',  '591.53',  '617.25',  '642.96',  '668.68',  '694.40',  '720.12',  '745.84',  '771.56'),\r\n                            ('47',  '25.72',  '51.44',  '77.16',  '102.87',  '128.59',  '154.31',  '180.03',  '205.75',  '231.47',  '257.19',  '282.90',  '308.62',  '334.34',  '360.06',  '385.78',  '411.50',  '437.22',  '462.93',  '488.65',  '514.37',  '540.09',  '565.81',  '591.53',  '617.25',  '642.96',  '668.68',  '694.40',  '720.12',  '745.84',  '771.56'),\r\n                            ('48',  '25.72',  '51.44',  '77.16',  '102.87',  '128.59',  '154.31',  '180.03',  '205.75',  '231.47',  '257.19',  '282.90',  '308.62',  '334.34',  '360.06',  '385.78',  '411.50',  '437.22',  '462.93',  '488.65',  '514.37',  '540.09',  '565.81',  '591.53',  '617.25',  '642.96',  '668.68',  '694.40',  '720.12',  '745.84',  '771.56'),\r\n                            ('49',  '25.72',  '51.44',  '77.16',  '102.87',  '128.59',  '154.31',  '180.03',  '205.75',  '231.47',  '257.19',  '282.90',  '308.62',  '334.34',  '360.06',  '385.78',  '411.50',  '437.22',  '462.93',  '488.65',  '514.37',  '540.09',  '565.81',  '591.53',  '617.25',  '642.96',  '668.68',  '694.40',  '720.12',  '745.84',  '771.56'),\r\n                            ('50',  '25.72',  '51.44',  '77.16',  '102.87',  '128.59',  '154.31',  '180.03',  '205.75',  '231.47',  '257.19',  '282.90',  '308.62',  '334.34',  '360.06',  '385.78',  '411.50',  '437.22',  '462.93',  '488.65',  '514.37',  '540.09',  '565.81',  '591.53',  '617.25',  '642.96',  '668.68',  '694.40',  '720.12',  '745.84',  '771.56'),\r\n                            ('51',  '31.20',  '62.41',  '93.61',  '124.82',  '156.02',  '187.23',  '218.43',  '249.63',  '280.84',  '312.04',  '343.25',  '374.45',  '405.66',  '436.86',  '468.06',  '499.27',  '530.47',  '561.68',  '592.88',  '624.08',  '655.29',  '686.49',  '717.70',  '748.90',  '780.11',  '811.31',  '842.51',  '873.72',  '904.92',  '936.13'),\r\n                            ('52',  '31.20',  '62.41',  '93.61',  '124.82',  '156.02',  '187.23',  '218.43',  '249.63',  '280.84',  '312.04',  '343.25',  '374.45',  '405.66',  '436.86',  '468.06',  '499.27',  '530.47',  '561.68',  '592.88',  '624.08',  '655.29',  '686.49',  '717.70',  '748.90',  '780.11',  '811.31',  '842.51',  '873.72',  '904.92',  '936.13'),\r\n                            ('53',  '31.20',  '62.41',  '93.61',  '124.82',  '156.02',  '187.23',  '218.43',  '249.63',  '280.84',  '312.04',  '343.25',  '374.45',  '405.66',  '436.86',  '468.06',  '499.27',  '530.47',  '561.68',  '592.88',  '624.08',  '655.29',  '686.49',  '717.70',  '748.90',  '780.11',  '811.31',  '842.51',  '873.72',  '904.92',  '936.13'),\r\n                            ('54',  '31.20',  '62.41',  '93.61',  '124.82',  '156.02',  '187.23',  '218.43',  '249.63',  '280.84',  '312.04',  '343.25',  '374.45',  '405.66',  '436.86',  '468.06',  '499.27',  '530.47',  '561.68',  '592.88',  '624.08',  '655.29',  '686.49',  '717.70',  '748.90',  '780.11',  '811.31',  '842.51',  '873.72',  '904.92',  '936.13'),\r\n                            ('55',  '31.20',  '62.41',  '93.61',  '124.82',  '156.02',  '187.23',  '218.43',  '249.63',  '280.84',  '312.04',  '343.25',  '374.45',  '405.66',  '436.86',  '468.06',  '499.27',  '530.47',  '561.68',  '592.88',  '624.08',  '655.29',  '686.49',  '717.70',  '748.90',  '780.11',  '811.31',  '842.51',  '873.72',  '904.92',  '936.13'),\r\n                            ('56',  '36.22',  '72.45',  '108.67',  '144.90',  '181.12',  '217.35',  '253.57',  '289.80',  '326.02',  '362.25',  '398.47',  '434.70',  '470.92',  '507.15',  '543.37',  '579.60',  '615.82',  '652.05',  '688.27',  '724.50',  '760.72',  '796.95',  '833.17',  '869.39',  '905.62',  '941.84',  '978.07',  '1.014.29','1.050.52','1.086.74'),\r\n                            ('57',  '36.22',  '72.45',  '108.67',  '144.90',  '181.12',  '217.35',  '253.57',  '289.80',  '326.02',  '362.25',  '398.47',  '434.70',  '470.92',  '507.15',  '543.37',  '579.60',  '615.82',  '652.05',  '688.27',  '724.50',  '760.72',  '796.95',  '833.17',  '869.39',  '905.62',  '941.84',  '978.07',  '1.014.29','1.050.52','1.086.74'),\r\n                            ('58',  '36.22',  '72.45',  '108.67',  '144.90',  '181.12',  '217.35',  '253.57',  '289.80',  '326.02',  '362.25',  '398.47',  '434.70',  '470.92',  '507.15',  '543.37',  '579.60',  '615.82',  '652.05',  '688.27',  '724.50',  '760.72',  '796.95',  '833.17',  '869.39',  '905.62',  '941.84',  '978.07',  '1.014.29','1.050.52','1.086.74'),\r\n                            ('59',  '36.22',  '72.45',  '108.67',  '144.90',  '181.12',  '217.35',  '253.57',  '289.80',  '326.02',  '362.25',  '398.47',  '434.70',  '470.92',  '507.15',  '543.37',  '579.60',  '615.82',  '652.05',  '688.27',  '724.50',  '760.72',  '796.95',  '833.17',  '869.39',  '905.62',  '941.84',  '978.07',  '1.014.29','1.050.52','1.086.74'),\r\n                            ('60',  '36.22',  '72.45',  '108.67',  '144.90',  '181.12',  '217.35',  '253.57',  '289.80',  '326.02',  '362.25',  '398.47',  '434.70',  '470.92',  '507.15',  '543.37',  '579.60',  '615.82',  '652.05',  '688.27',  '724.50',  '760.72',  '796.95',  '833.17',  '869.39',  '905.62',  '941.84',  '978.07',  '1.014.29','1.050.52','1.086.74'),\r\n                            ('61',  '40.94',  '81.87',  '122.81',  '163.74',  '204.68',  '245.62',  '286.55',  '327.49',  '368.43',  '409.36',  '450.30',  '491.23',  '532.17',  '573.11',  '614.04',  '654.98',  '695.92',  '736.85',  '777.79',  '818.72',  '859.66',  '900.60',  '941.53',  '982.47',  '1.023.40','1.064.34','1.105.28','1.146.21','1.187.15','1.228.09'),\r\n                            ('62',  '40.94',  '81.87',  '122.81',  '163.74',  '204.68',  '245.62',  '286.55',  '327.49',  '368.43',  '409.36',  '450.30',  '491.23',  '532.17',  '573.11',  '614.04',  '654.98',  '695.92',  '736.85',  '777.79',  '818.72',  '859.66',  '900.60',  '941.53',  '982.47',  '1.023.40','1.064.34','1.105.28','1.146.21','1.187.15','1.228.09'),\r\n                            ('63',  '40.94',  '81.87',  '122.81',  '163.74',  '204.68',  '245.62',  '286.55',  '327.49',  '368.43',  '409.36',  '450.30',  '491.23',  '532.17',  '573.11',  '614.04',  '654.98',  '695.92',  '736.85',  '777.79',  '818.72',  '859.66',  '900.60',  '941.53',  '982.47',  '1.023.40','1.064.34','1.105.28','1.146.21','1.187.15','1.228.09'),\r\n                            ('64',  '40.94',  '81.87',  '122.81',  '163.74',  '204.68',  '245.62',  '286.55',  '327.49',  '368.43',  '409.36',  '450.30',  '491.23',  '532.17',  '573.11',  '614.04',  '654.98',  '695.92',  '736.85',  '777.79',  '818.72',  '859.66',  '900.60',  '941.53',  '982.47',  '1.023.40','1.064.34','1.105.28','1.146.21','1.187.15','1.228.09'),\r\n                            ('65',  '40.94',  '81.87',  '122.81',  '163.74',  '204.68',  '245.62',  '286.55',  '327.49',  '368.43',  '409.36',  '450.30',  '491.23',  '532.17',  '573.11',  '614.04',  '654.98',  '695.92',  '736.85',  '777.79',  '818.72',  '859.66',  '900.60',  '941.53',  '982.47',  '1.023.40','1.064.34','1.105.28','1.146.21','1.187.15','1.228.09'),\r\n                            ('66',  '42.82',  '85.64',  '128.46',  '171.28',  '214.10',  '256.92',  '299.74',  '342.56',  '385.38',  '428.20',  '471.03',  '513.85',  '556.67',  '599.49',  '642.31',  '685.13',  '727.95',  '770.77',  '813.59',  '856.41',  '899.23',  '942.05',  '984.87',  '1.027.69',  '1.070.51','1.113.33','1.156.15','1.198.97','1.241.79','1.284.61'),\r\n                            ('67',  '42.82',  '85.64',  '128.46',  '171.28',  '214.10',  '256.92',  '299.74',  '342.56',  '385.38',  '428.20',  '471.03',  '513.85',  '556.67',  '599.49',  '642.31',  '685.13',  '727.95',  '770.77',  '813.59',  '856.41',  '899.23',  '942.05',  '984.87',  '1.027.69',  '1.070.51','1.113.33','1.156.15','1.198.97','1.241.79','1.284.61'),\r\n                            ('68',  '42.82',  '85.64',  '128.46',  '171.28',  '214.10',  '256.92',  '299.74',  '342.56',  '385.38',  '428.20',  '471.03',  '513.85',  '556.67',  '599.49',  '642.31',  '685.13',  '727.95',  '770.77',  '813.59',  '856.41',  '899.23',  '942.05',  '984.87',  '1.027.69',  '1.070.51','1.113.33','1.156.15','1.198.97','1.241.79','1.284.61'),\r\n                            ('69',  '42.82',  '85.64',  '128.46',  '171.28',  '214.10',  '256.92',  '299.74',  '342.56',  '385.38',  '428.20',  '471.03',  '513.85',  '556.67',  '599.49',  '642.31',  '685.13',  '727.95',  '770.77',  '813.59',  '856.41',  '899.23',  '942.05',  '984.87',  '1.027.69',  '1.070.51','1.113.33','1.156.15','1.198.97','1.241.79','1.284.61'),\r\n                            ('70',  '42.82',  '85.64',  '128.46',  '171.28',  '214.10',  '256.92',  '299.74',  '342.56',  '385.38',  '428.20',  '471.03',  '513.85',  '556.67',  '599.49',  '642.31',  '685.13',  '727.95',  '770.77',  '813.59',  '856.41',  '899.23',  '942.05',  '984.87',  '1.027.69',  '1.070.51','1.113.33','1.156.15','1.198.97','1.241.79','1.284.61'),\r\n                            ('71',  '47.22',  '94.45',  '141.67',  '188.90',  '236.12',  '283.34',  '330.57',  '377.79',  '425.01',  '472.24',  '519.46',  '566.69',  '613.91',  '661.13',  '708.36',  '755.58',  '802.80',  '850.03',  '897.25',  '944.48',  '991.70',  '1.038.92',  '1.086.15','1.133.37',  '1.180.59','1.227.82','1.275.04','1.322.27',  '1.369.49','1.416.71'),\r\n                            ('72',  '47.22',  '94.45',  '141.67',  '188.90',  '236.12',  '283.34',  '330.57',  '377.79',  '425.01',  '472.24',  '519.46',  '566.69',  '613.91',  '661.13',  '708.36',  '755.58',  '802.80',  '850.03',  '897.25',  '944.48',  '991.70',  '1.038.92',  '1.086.15','1.133.37',  '1.180.59','1.227.82','1.275.04','1.322.27',  '1.369.49','1.416.71'),\r\n                            ('73',  '47.22',  '94.45',  '141.67',  '188.90',  '236.12',  '283.34',  '330.57',  '377.79',  '425.01',  '472.24',  '519.46',  '566.69',  '613.91',  '661.13',  '708.36',  '755.58',  '802.80',  '850.03',  '897.25',  '944.48',  '991.70',  '1.038.92',  '1.086.15','1.133.37',  '1.180.59','1.227.82','1.275.04','1.322.27',  '1.369.49','1.416.71'),\r\n                            ('74',  '47.22',  '94.45',  '141.67',  '188.90',  '236.12',  '283.34',  '330.57',  '377.79',  '425.01',  '472.24',  '519.46',  '566.69',  '613.91',  '661.13',  '708.36',  '755.58',  '802.80',  '850.03',  '897.25',  '944.48',  '991.70',  '1.038.92',  '1.086.15','1.133.37',  '1.180.59','1.227.82','1.275.04','1.322.27',  '1.369.49','1.416.71'),\r\n                            ('75',  '47.22',  '94.45',  '141.67',  '188.90',  '236.12',  '283.34',  '330.57',  '377.79',  '425.01',  '472.24',  '519.46',  '566.69',  '613.91',  '661.13',  '708.36',  '755.58',  '802.80',  '850.03',  '897.25',  '944.48',  '991.70',  '1.038.92',  '1.086.15','1.133.37',  '1.180.59','1.227.82','1.275.04','1.322.27',  '1.369.49','1.416.71');");
                });

            modelBuilder.Entity("Domain.Model.Dados.DoencasGraves", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Essencial")
                        .HasColumnType("double");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<double>("Plus")
                        .HasColumnType("double");

                    b.Property<double>("Premium")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("DoencasGraves");

                    b.ToSqlQuery("INSERT INTO DoencasGraves (Idade, Essencial, Plus, Premium) VALUES\r\n                ('16',  '0.16',  '0.22',  '0.45'),\r\n                ('17',  '0.16',  '0.22',  '0.45'),\r\n                ('18',  '0.16',  '0.22',  '0.45'),\r\n                ('19',  '0.16',  '0.22',  '0.45'),\r\n                ('20',  '0.16',  '0.22',  '0.45'),\r\n                ('21',  '0.16',  '0.22',  '0.45'),\r\n                ('22',  '0.16',  '0.22',  '0.45'),\r\n                ('23',  '0.16',  '0.22',  '0.45'),\r\n                ('24',  '0.16',  '0.22',  '0.45'),\r\n                ('25',  '0.16',  '0.22',  '0.45'),\r\n                ('26',  '0.17',  '0.24',  '0.5'),\r\n                ('27',  '0.17',  '0.24',  '0.5'),\r\n                ('28',  '0.17',  '0.24',  '0.5'),\r\n                ('29',  '0.17',  '0.24',  '0.5'),\r\n                ('30',  '0.17',  '0.24',  '0.5'),\r\n                ('31',  '0.24',  '0.33',  '0.59'),\r\n                ('32',  '0.24',  '0.33',  '0.59'),\r\n                ('33',  '0.24',  '0.33',  '0.59'),\r\n                ('34',  '0.24',  '0.33',  '0.59'),\r\n                ('35',  '0.24',  '0.33',  '0.59'),\r\n                ('36',  '0.3',  '0.43',  '0.68'),\r\n                ('37',  '0.3',  '0.43',  '0.68'),\r\n                ('38',  '0.3',  '0.43',  '0.68'),\r\n                ('39',  '0.3',  '0.43',  '0.68'),\r\n                ('40',  '0.3',  '0.43',  '0.68'),\r\n                ('41',  '0.48',  '0.7',  '0.98'),\r\n                ('42',  '0.48',  '0.7',  '0.98'),\r\n                ('43',  '0.48',  '0.7',  '0.98'),\r\n                ('44',  '0.48',  '0.7',  '0.98'),\r\n                ('45',  '0.48',  '0.7',  '0.98'),\r\n                ('46',  '0.66',  '0.98',  '1.27'),\r\n                ('47',  '0.66',  '0.98',  '1.27'),\r\n                ('48',  '0.66',  '0.98',  '1.27'),\r\n                ('49',  '0.66',  '0.98',  '1.27'),\r\n                ('50',  '0.66',  '0.98',  '1.27'),\r\n                ('51',  '0.96',  '1.52',  '1.86'),\r\n                ('52',  '0.96',  '1.52',  '1.86'),\r\n                ('53',  '0.96',  '1.52',  '1.86'),\r\n                ('54',  '0.96',  '1.52',  '1.86'),\r\n                ('55',  '0.96',  '1.52',  '1.86'),\r\n                ('56',  '1.38',  '2.24',  '2.62'),\r\n                ('57',  '1.38',  '2.24',  '2.62'),\r\n                ('58',  '1.38',  '2.24',  '2.62'),\r\n                ('59',  '1.38',  '2.24',  '2.62'),\r\n                ('60',  '1.38',  '2.24',  '2.62'),\r\n                ('61',  '1.81',  '3.06',  '3.51'),\r\n                ('62',  '1.81',  '3.06',  '3.51'),\r\n                ('63',  '1.81',  '3.06',  '3.51'),\r\n                ('64',  '1.81',  '3.06',  '3.51'),\r\n                ('65',  '1.81',  '3.06',  '3.51');");
                });

            modelBuilder.Entity("Domain.Model.Dados.DoencasGravesMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<double>("Valor")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("DoencasGravesMaster");

                    b.ToSqlQuery("INSERT INTO DoencasGravesMaster (Idade, Valor) VALUES\r\n            ('66',  '3.53'),\r\n            ('67',  '3.69'),\r\n            ('68',  '3.85'),\r\n            ('69',  '4.06'),\r\n            ('70',  '4.27'),\r\n            ('71',  '4.47'),\r\n            ('72',  '4.68'),\r\n            ('73',  '4.88'),\r\n            ('74',  '5.2'),\r\n            ('75',  '5.53'),\r\n            ('76',  '5.85'),\r\n            ('77',  '5.89'),\r\n            ('78',  '6.49'),\r\n            ('79',  '7.16'),\r\n            ('80',  '7.89'),\r\n            ('81',  '8.68'),\r\n            ('82',  '9.55'),\r\n            ('83',  '10.5'),\r\n            ('84',  '11.51'),\r\n            ('85',  '12.58');");
                });

            modelBuilder.Entity("Domain.Model.Dados.InvalidezAcidenteMajorada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<double>("Valor")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("InvalidezAcidenteMajorada");

                    b.ToSqlQuery(" INSERT INTO InvalidezAcidenteMajorada (Idade, Valor) VALUES\r\n                ('16',  '0.0761'),\r\n                ('17',  '0.0761'),\r\n                ('18',  '0.0761'),\r\n                ('19',  '0.0761'),\r\n                ('20',  '0.0761'),\r\n                ('21',  '0.0761'),\r\n                ('22',  '0.0761'),\r\n                ('23',  '0.0761'),\r\n                ('24',  '0.0761'),\r\n                ('25',  '0.0761'),\r\n                ('26',  '0.0761'),\r\n                ('27',  '0.0761'),\r\n                ('28',  '0.0761'),\r\n                ('29',  '0.0761'),\r\n                ('30',  '0.0761'),\r\n                ('31',  '0.0761'),\r\n                ('32',  '0.0761'),\r\n                ('33',  '0.0761'),\r\n                ('34',  '0.0761'),\r\n                ('35',  '0.0761'),\r\n                ('36',  '0.0761'),\r\n                ('37',  '0.0761'),\r\n                ('38',  '0.0761'),\r\n                ('39',  '0.0761'),\r\n                ('40',  '0.0761'),\r\n                ('41',  '0.0761'),\r\n                ('42',  '0.0761'),\r\n                ('43',  '0.0761'),\r\n                ('44',  '0.0761'),\r\n                ('45',  '0.0761'),\r\n                ('46',  '0.0761'),\r\n                ('47',  '0.0761'),\r\n                ('48',  '0.0761'),\r\n                ('49',  '0.0761'),\r\n                ('50',  '0.0761'),\r\n                ('51',  '0.0761'),\r\n                ('52',  '0.0761'),\r\n                ('53',  '0.0761'),\r\n                ('54',  '0.0761'),\r\n                ('55',  '0.0761'),\r\n                ('56',  '0.0761'),\r\n                ('57',  '0.0761'),\r\n                ('58',  '0.0761'),\r\n                ('59',  '0.0761'),\r\n                ('60',  '0.0761');");
                });

            modelBuilder.Entity("Domain.Model.Dados.InvalidezAcidenteMajoradaDoenca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<double>("Valor")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("InvalidezAcidenteMajoradaDoenca");

                    b.ToSqlQuery("INSERT INTO InvalidezAcidenteMajoradaDoenca (Idade, Valor) VALUES\r\n                ('16',		'0,12'),	\r\n                ('17',		'0,12'),	\r\n                ('18',		'0,12'),	\r\n                ('19',		'0,12'),	\r\n                ('20',		'0,12'),	\r\n                ('21',		'0,12'),	\r\n                ('22',		'0,12'),	\r\n                ('23',		'0,12'),	\r\n                ('24',		'0,12'),	\r\n                ('25',		'0,12'),	\r\n                ('26',		'0,13'),	\r\n                ('27',		'0,13'),	\r\n                ('28',		'0,13'),	\r\n                ('29',		'0,13'),	\r\n                ('30',		'0,13'),	\r\n                ('31',		'0,13'),	\r\n                ('32',		'0,13'),	\r\n                ('33',		'0,13'),	\r\n                ('34',		'0,13'),	\r\n                ('35',		'0,13'),	\r\n                ('36',		'0,15'),	\r\n                ('37',		'0,15'),	\r\n                ('38',		'0,15'),	\r\n                ('39',		'0,15'),	\r\n                ('40',		'0,15'),	\r\n                ('41',		'0,2'),	\r\n                ('42',		'0,2'),	\r\n                ('43',		'0,2'),	\r\n                ('44',		'0,2'),	\r\n                ('45',		'0,2'),	\r\n                ('46',		'0,26'),	\r\n                ('47',		'0,26'),	\r\n                ('48',		'0,26'),	\r\n                ('49',		'0,26'),	\r\n                ('50',		'0,26'),	\r\n                ('51',		'0,41'),	\r\n                ('52',		'0,41'),	\r\n                ('53',		'0,41'),	\r\n                ('54',		'0,41'),	\r\n                ('55',		'0,41'),	\r\n                ('56',		'0,69'),	\r\n                ('57',		'0,69'),	\r\n                ('58',		'0,69'),	\r\n                ('59',		'0,69'),	\r\n                ('60',		'0,69');");
                });

            modelBuilder.Entity("Domain.Model.Dados.InvalidezTotalAcidente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<double>("Valor")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("InvalidezTotalAcidente");

                    b.ToSqlQuery("  INSERT INTO InvalidezTotalAcidente(Idade, Valor) VALUES\r\n                ('61',  '0.07'),\r\n                ('62',  '0.07'),\r\n                ('63',  '0.07'),\r\n                ('64',  '0.07'),\r\n                ('65',  '0.07'),\r\n                ('66',  '0.07'),\r\n                ('67',  '0.07'),\r\n                ('68',  '0.07'),\r\n                ('69',  '0.07'),\r\n                ('70',  '0.07'),\r\n                ('71',  '0.07'),\r\n                ('72',  '0.07'),\r\n                ('73',  '0.07'),\r\n                ('74',  '0.07'),\r\n                ('75',  '0.07'),\r\n                ('76',  '0.07'),\r\n                ('77',  '0.07'),\r\n                ('78',  '0.07'),\r\n                ('79',  '0.07'),\r\n                ('80',  '0.07');");
                });

            modelBuilder.Entity("Domain.Model.Dados.MortePorAcidente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<double>("Valor")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("MortePorAcidente");

                    b.ToSqlQuery("INSERT INTO MortePorAcidente (Idade, Valor) VALUES\r\n                ('16',    '0.18'), \r\n                ('17',    '0.18'), \r\n                ('18',    '0.18'), \r\n                ('19',    '0.18'), \r\n                ('20',    '0.18'), \r\n                ('21',    '0.18'), \r\n                ('22',    '0.18'), \r\n                ('23',    '0.18'), \r\n                ('24',    '0.18'), \r\n                ('25',    '0.18'), \r\n                ('26',    '0.15'), \r\n                ('27',    '0.15'), \r\n                ('28',    '0.15'), \r\n                ('29',    '0.15'), \r\n                ('30',    '0.15'), \r\n                ('31',    '0.15'), \r\n                ('32',    '0.15'), \r\n                ('33',    '0.15'), \r\n                ('34',    '0.15'), \r\n                ('35',    '0.15'), \r\n                ('36',    '0.15'), \r\n                ('37',    '0.15'), \r\n                ('38',    '0.15'), \r\n                ('39',    '0.15'), \r\n                ('40',    '0.15'), \r\n                ('41',    '0.13'), \r\n                ('42',    '0.13'), \r\n                ('43',    '0.13'), \r\n                ('44',    '0.13'), \r\n                ('45',    '0.13'), \r\n                ('46',    '0.13'), \r\n                ('47',    '0.13'), \r\n                ('48',    '0.13'), \r\n                ('49',    '0.13'), \r\n                ('50',    '0.13'), \r\n                ('51',    '0.13'), \r\n                ('52',    '0.13'), \r\n                ('53',    '0.13'), \r\n                ('54',    '0.13'), \r\n                ('55',    '0.13'), \r\n                ('56',    '0.13'), \r\n                ('57',    '0.13'), \r\n                ('58',    '0.13'), \r\n                ('59',    '0.13'), \r\n                ('60',    '0.13'), \r\n                ('61',    '0.13'), \r\n                ('62',    '0.13'), \r\n                ('63',    '0.13'), \r\n                ('64',    '0.13'), \r\n                ('65',    '0.13'), \r\n                ('66',    '0.13'), \r\n                ('67',    '0.13'), \r\n                ('68',    '0.13'), \r\n                ('69',    '0.13'), \r\n                ('70',    '0.13'), \r\n                ('71',    '0.13'), \r\n                ('72',    '0.13'), \r\n                ('73',    '0.13'), \r\n                ('74',    '0.13'), \r\n                ('75',    '0.13'), \r\n                ('76',    '0.13'), \r\n                ('77',    '0.13'), \r\n                ('78',    '0.13'), \r\n                ('79',    '0.13'), \r\n                ('80',    '0.13');");
                });

            modelBuilder.Entity("Domain.Model.Dados.PensaoPorMorte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<double>("I10")
                        .HasColumnType("double");

                    b.Property<double>("I15")
                        .HasColumnType("double");

                    b.Property<double>("I20")
                        .HasColumnType("double");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PensaoPorMorte");

                    b.ToSqlQuery(" INSERT INTO PensaoPorMorte (Idade, I10, I15,I20) VALUES\r\n                ('16',  '24.62',  '34.83',  '43.85'),\r\n                ('17',  '24.62',  '34.83',  '43.85'),\r\n                ('18',  '24.62',  '34.83',  '43.85'),\r\n                ('19',  '24.62',  '34.83',  '43.85'),\r\n                ('20',  '24.62',  '34.83',  '43.85'),\r\n                ('21',  '24.62',  '34.83',  '43.85'),\r\n                ('22',  '24.62',  '34.83',  '43.85'),\r\n                ('23',  '24.62',  '34.83',  '43.85'),\r\n                ('24',  '24.62',  '34.83',  '43.85'),\r\n                ('25',  '24.62',  '34.83',  '43.85'),\r\n                ('26',  '24.62',  '34.83',  '43.85'),\r\n                ('27',  '24.62',  '34.83',  '43.85'),\r\n                ('28',  '24.62',  '34.83',  '43.85'),\r\n                ('29',  '24.62',  '34.83',  '43.85'),\r\n                ('30',  '24.62',  '34.83',  '43.85'),\r\n                ('31',  '29.35',  '41.52',  '52.28'),\r\n                ('32',  '29.35',  '41.52',  '52.28'),\r\n                ('33',  '29.35',  '41.52',  '52.28'),\r\n                ('34',  '29.35',  '41.52',  '52.28'),\r\n                ('35',  '29.35',  '41.52',  '52.28'),\r\n                ('36',  '35.89',  '50.77',  '63.92'),\r\n                ('37',  '35.89',  '50.77',  '63.92'),\r\n                ('38',  '35.89',  '50.77',  '63.92'),\r\n                ('39',  '35.89',  '50.77',  '63.92'),\r\n                ('40',  '35.89',  '50.77',  '63.92'),\r\n                ('41',  '53.83',  '76.16',  '95.89'),\r\n                ('42',  '53.83',  '76.16',  '95.89'),\r\n                ('43',  '53.83',  '76.16',  '95.89'),\r\n                ('44',  '53.83',  '76.16',  '95.89'),\r\n                ('45',  '53.83',  '76.16',  '95.89'),\r\n                ('46',  '79.84',  '112.95',  '142.22'),\r\n                ('47',  '79.84',  '112.95',  '142.22'),\r\n                ('48',  '79.84',  '112.95',  '142.22'),\r\n                ('49',  '79.84',  '112.95',  '142.22'),\r\n                ('50',  '79.84',  '112.95',  '142.22'),\r\n                ('51',  '121.16',  '171.4',  '215.81'),\r\n                ('52',  '121.16',  '171.4',  '215.81'),\r\n                ('53',  '121.16',  '171.4',  '215.81'),\r\n                ('54',  '121.16',  '171.4',  '215.81'),\r\n                ('55',  '121.16',  '171.4',  '215.81'),\r\n                ('56',  '189.04',  '267.43',  '336.72'),\r\n                ('57',  '189.04',  '267.43',  '336.72'),\r\n                ('58',  '189.04',  '267.43',  '336.72'),\r\n                ('59',  '189.04',  '267.43',  '336.72'),\r\n                ('60',  '189.04',  '267.43',  '336.72'),\r\n                ('61',  '243.98',  '345.16',  '434.58'),\r\n                ('62',  '266.94',  '377.63',  '475.46'),\r\n                ('63',  '292.95',  '414.43',  '521.8'),\r\n                ('64',  '321.88',  '455.36',  '573.33'),\r\n                ('65',  '353.6',  '500.22',  '629.82'),\r\n                ('66',  '387.4',  '548.04',  '690.03'),\r\n                ('67',  '423.42',  '599.01',  '754.2'),\r\n                ('68',  '461.68',  '653.13',  '822.34'),\r\n                ('69',  '503.13',  '711.77',  '896.17'),\r\n                ('70',  '549.59',  '777.49',  '978.93'),\r\n                ('71',  '602.31',  '852.07',  '1072.73'),\r\n                ('72',  '662.82',  '937.68',  '1180.61'),\r\n                ('73',  '732.23',  '1035.87',  '1304.25'),\r\n                ('74',  '809.43',  '1145.09',  '1441.76'),\r\n                ('75',  '892.89',  '1263.16',  '1590.42'),\r\n                ('76',  '981.08',  '1387.92',  '1747.5'),\r\n                ('77',  '1072.75',  '1517.6',  '1910.78'),\r\n                ('78',  '1167.06',  '1651.02',  '2078.77'),\r\n                ('79',  '1266.52',  '1791.72',  '2255.92'),\r\n                ('80',  '1374.88',  '1945.01',  '2448.93');");
                });

            modelBuilder.Entity("Domain.Model.Dados.PrazoCerto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<double>("I10")
                        .HasColumnType("double");

                    b.Property<double>("I15")
                        .HasColumnType("double");

                    b.Property<double>("I20")
                        .HasColumnType("double");

                    b.Property<double>("I5")
                        .HasColumnType("double");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PrazoCerto");

                    b.ToSqlQuery(" INSERT INTO PrazoCerto(Idade, I5, I10, I15, I20) VALUES\r\n                ('16',  '0.2',  '0.21',   '0.23',  '0.26'),\r\n                ('17',  '0.2',  '0.21',   '0.23',  '0.26'),\r\n                ('18',  '0.2',  '0.21',   '0.23',  '0.26'),\r\n                ('19',  '0.2',  '0.21',   '0.23',  '0.26'),\r\n                ('20',  '0.2',  '0.21',   '0.23',  '0.26'),\r\n                ('21',  '0.2',  '0.21',   '0.23',  '0.26'),\r\n                ('22',  '0.2',  '0.21',   '0.23',  '0.26'),\r\n                ('23',  '0.2',  '0.21',   '0.23',  '0.26'),\r\n                ('24',  '0.2',  '0.21',   '0.23',  '0.26'),\r\n                ('25',  '0.2',  '0.21',   '0.23',  '0.26'),\r\n                ('26',  '0.2',  '0.21',   '0.23',  '0.26'),\r\n                ('27',  '0.2',  '0.21',   '0.23',  '0.26'),\r\n                ('28',  '0.2',  '0.21',   '0.23',  '0.26'),\r\n                ('29',  '0.2',  '0.21',   '0.23',  '0.26'),\r\n                ('30',  '0.2',  '0.21',   '0.23',  '0.26'),\r\n                ('31',  '0.25',  '0.3',    '0.36',  '0.43'),\r\n                ('32',  '0.25',  '0.3',    '0.36',  '0.43'),\r\n                ('33',  '0.25',  '0.3',    '0.36',  '0.43'),\r\n                ('34',  '0.25',  '0.3',    '0.36',  '0.43'),\r\n                ('35',  '0.25',  '0.3',    '0.36',  '0.43'),\r\n                ('36',  '0.35',  '0.43',   '0.53',  '0.65'),\r\n                ('37',  '0.35',  '0.43',   '0.53',  '0.65'),\r\n                ('38',  '0.35',  '0.43',   '0.53',  '0.65'),\r\n                ('39',  '0.35',  '0.43',   '0.53',  '0.65'),\r\n                ('40',  '0.35',  '0.43',   '0.53',  '0.65'),\r\n                ('41',  '0.53',  '0.65',   '0.8',  '0.98'),\r\n                ('42',  '0.53',  '0.65',   '0.8',  '0.98'),\r\n                ('43',  '0.53',  '0.65',   '0.8',  '0.98'),\r\n                ('44',  '0.53',  '0.65',   '0.8',  '0.98'),\r\n                ('45',  '0.53',  '0.65',   '0.8',  '0.98'),\r\n                ('46',  '0.79',  '0.98',   '1.21',  '1.5'),\r\n                ('47',  '0.79',  '0.98',   '1.21',  '1.5'),\r\n                ('48',  '0.79',  '0.98',   '1.21',  '1.5'),\r\n                ('49',  '0.79',  '0.98',   '1.21',  '1.5'),\r\n                ('50',  '0.79',  '0.98',   '1.21',  '1.5'),\r\n                ('51',  '1.23',  '1.52',   '1.88',  '0'),\r\n                ('52',  '1.23',  '1.52',   '1.88',  '0'),\r\n                ('53',  '1.23',  '1.52',   '1.88',  '0'),\r\n                ('54',  '1.23',  '1.52',   '1.88',  '0'),\r\n                ('55',  '1.23',  '1.52',   '1.88',  '0'),\r\n                ('56',  '1.89',  '2.36',   '0',  '0'),\r\n                ('57',  '1.89',  '2.36',   '0',  '0'),\r\n                ('58',  '1.89',  '2.36',   '0',  '0'),\r\n                ('59',  '1.89',  '2.36',   '0',  '0'),\r\n                ('60',  '1.89',  '2.36',   '0',  '0');");
                });

            modelBuilder.Entity("Domain.Model.Dados.RendaInvalidez", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<double>("I20")
                        .HasColumnType("double");

                    b.Property<double>("I30")
                        .HasColumnType("double");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RendaInvalidez");

                    b.ToSqlQuery("INSERT INTO RendaInvalidez (Idade, I20, I30) VALUES\r\n                        ('16',  '14.14',  '18.87'),\r\n                        ('17',  '14.14',  '18.87'),\r\n                        ('18',  '14.14',  '18.87'),\r\n                        ('19',  '14.14',  '18.87'),\r\n                        ('20',  '14.14',  '18.87'),\r\n                        ('21',  '14.14',  '18.87'),\r\n                        ('22',  '14.14',  '18.87'),\r\n                        ('23',  '14.14',  '18.87'),\r\n                        ('24',  '14.14',  '18.87'),\r\n                        ('25',  '14.14',  '18.87'),\r\n                        ('26',  '14.14',  '18.87'),\r\n                        ('27',  '14.14',  '18.87'),\r\n                        ('28',  '14.14',  '18.87'),\r\n                        ('29',  '14.14',  '18.87'),\r\n                        ('30',  '14.14',  '18.87'),\r\n                        ('31',  '15.76',  '20.89'),\r\n                        ('32',  '15.76',  '20.89'),\r\n                        ('33',  '15.76',  '20.89'),\r\n                        ('34',  '15.76',  '20.89'),\r\n                        ('35',  '15.76',  '20.89'),\r\n                        ('36',  '18.6',  '24.5'),\r\n                        ('37',  '18.6',  '24.5'),\r\n                        ('38',  '18.6',  '24.5'),\r\n                        ('39',  '18.6',  '24.5'),\r\n                        ('40',  '18.6',  '24.5'),\r\n                        ('41',  '24.41',  '31.84'),\r\n                        ('42',  '24.41',  '31.84'),\r\n                        ('43',  '24.41',  '31.84'),\r\n                        ('44',  '24.41',  '31.84'),\r\n                        ('45',  '24.41',  '31.84'),\r\n                        ('46',  '35.81',  '45.95'),\r\n                        ('47',  '35.81',  '45.95'),\r\n                        ('48',  '35.81',  '45.95'),\r\n                        ('49',  '35.81',  '45.95'),\r\n                        ('50',  '35.81',  '45.95'),\r\n                        ('51',  '57.46',  '71.87'),\r\n                        ('52',  '57.46',  '71.87'),\r\n                        ('53',  '57.46',  '71.87'),\r\n                        ('54',  '57.46',  '71.87'),\r\n                        ('55',  '57.46',  '71.87'),\r\n                        ('56',  '97.25',  '117.28'),\r\n                        ('57',  '97.25',  '117.28'),\r\n                        ('58',  '97.25',  '117.28'),\r\n                        ('59',  '97.25',  '117.28'),\r\n                        ('60',  '97.25',  '117.28');");
                });

            modelBuilder.Entity("Domain.Model.Dados.SafLuxo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Familiar")
                        .HasColumnType("double");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<double>("Individual")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("SafLuxo");

                    b.ToSqlQuery("INSERT INTO SafLuxo (Idade, Individual, Familiar) VALUES\r\n                ('16',  '1.56',  '5.01'),\r\n                ('17',  '1.56',  '5.01'),\r\n                ('18',  '1.56',  '5.01'),\r\n                ('19',  '1.56',  '5.01'),\r\n                ('20',  '1.56',  '5.01'),\r\n                ('21',  '1.56',  '5.01'),\r\n                ('22',  '1.56',  '5.01'),\r\n                ('23',  '1.56',  '5.01'),\r\n                ('24',  '1.56',  '5.01'),\r\n                ('25',  '1.56',  '5.01'),\r\n                ('26',  '1.56',  '5.01'),\r\n                ('27',  '1.56',  '5.01'),\r\n                ('28',  '1.56',  '5.01'),\r\n                ('29',  '1.56',  '5.01'),\r\n                ('30',  '1.56',  '5.01'),\r\n                ('31',  '1.56',  '5.01'),\r\n                ('32',  '1.56',  '5.01'),\r\n                ('33',  '1.56',  '5.01'),\r\n                ('34',  '1.56',  '5.01'),\r\n                ('35',  '1.56',  '5.01'),\r\n                ('36',  '2.37',  '6.76'),\r\n                ('37',  '2.37',  '6.76'),\r\n                ('38',  '2.37',  '6.76'),\r\n                ('39',  '2.37',  '6.76'),\r\n                ('40',  '2.37',  '6.76'),\r\n                ('41',  '3.56',  '9.84'),\r\n                ('42',  '3.56',  '9.84'),\r\n                ('43',  '3.56',  '9.84'),\r\n                ('44',  '3.56',  '9.84'),\r\n                ('45',  '3.56',  '9.84'),\r\n                ('46',  '5.28',  '12.73'),\r\n                ('47',  '5.28',  '12.73'),\r\n                ('48',  '5.28',  '12.73'),\r\n                ('49',  '5.28',  '12.73'),\r\n                ('50',  '5.28',  '12.73'),\r\n                ('51',  '8.01',  '17.37'),\r\n                ('52',  '8.01',  '17.37'),\r\n                ('53',  '8.01',  '17.37'),\r\n                ('54',  '8.01',  '17.37'),\r\n                ('55',  '8.01',  '17.37'),\r\n                ('56',  '12.5',  '26.02'),\r\n                ('57',  '12.5',  '26.02'),\r\n                ('58',  '12.5',  '26.02'),\r\n                ('59',  '12.5',  '26.02'),\r\n                ('60',  '12.5',  '26.02'),\r\n                ('61',  '16.14',  '33.39'),\r\n                ('62',  '17.66',  '36.38'),\r\n                ('63',  '19.38',  '39.73'),\r\n                ('64',  '21.29',  '43.49'),\r\n                ('65',  '23.39',  '47.6'),\r\n                ('66',  '25.63',  '52.13'),\r\n                ('67',  '28.01',  '57.01'),\r\n                ('68',  '30.54',  '62.3'),\r\n                ('69',  '33.28',  '67.96'),\r\n                ('70',  '36.36',  '74.15'),\r\n                ('71',  '39.84',  '80.95'),\r\n                ('72',  '43.85',  '88.56'),\r\n                ('73',  '48.44',  '97.14'),\r\n                ('74',  '53.54',  '106.82'),\r\n                ('75',  '59.06',  '117.56'),\r\n                ('76',  '64.9',      '129.36'),\r\n                ('77',  '70.96',  '142.1'),\r\n                ('78',  '77.2',      '155.53'),\r\n                ('79',  '83.78',  '169.77'),\r\n                ('80',  '90.95',  '184.89'),\r\n                ('81',  '98.9',      '185.67'),\r\n                ('82',  '107.89',  '202.09'),\r\n                ('83',  '118.02',  '206.73'),\r\n                ('84',  '129.05',  '225.61'),\r\n                ('85',  '140.74',  '230');");
                });

            modelBuilder.Entity("Domain.Model.Dados.SafSuperLuxo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Familiar")
                        .HasColumnType("double");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<double>("Individual")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("SafSuperLuxo");

                    b.ToSqlQuery(" INSERT INTO SafSuperLuxo (Idade, Individual, Familiar) VALUES\r\n                ('16',  '1.99',      '6.38'),\r\n                ('17',  '1.99',      '6.38'),\r\n                ('18',  '1.99',      '6.38'),\r\n                ('19',  '1.99',      '6.38'),\r\n                ('20',  '1.99',      '6.38'),\r\n                ('21',  '1.99',      '6.38'),\r\n                ('22',  '1.99',      '6.38'),\r\n                ('23',  '1.99',      '6.38'),\r\n                ('24',  '1.99',      '6.38'),\r\n                ('25',  '1.99',      '6.38'),\r\n                ('26',  '1.99',      '6.38'),\r\n                ('27',  '1.99',      '6.38'),\r\n                ('28',  '1.99',      '6.38'),\r\n                ('29',  '1.99',      '6.38'),\r\n                ('30',  '1.99',      '6.38'),\r\n                ('31',  '1.99',      '6.38'),\r\n                ('32',  '1.99',      '6.38'),\r\n                ('33',  '1.99',      '6.38'),\r\n                ('34',  '1.99',      '6.38'),\r\n                ('35',  '1.99',      '6.38'),\r\n                ('36',  '3.02',      '8.61'),\r\n                ('37',  '3.02',      '8.61'),\r\n                ('38',  '3.02',      '8.61'),\r\n                ('39',  '3.02',      '8.61'),\r\n                ('40',  '3.02',      '8.61'),\r\n                ('41',  '4.53',      '12.52'),\r\n                ('42',  '4.53',      '12.52'),\r\n                ('43',  '4.53',      '12.52'),\r\n                ('44',  '4.53',      '12.52'),\r\n                ('45',  '4.53',      '12.52'),\r\n                ('46',  '6.72',      '16.2'),\r\n                ('47',  '6.72',      '16.2'),\r\n                ('48',  '6.72',      '16.2'),\r\n                ('49',  '6.72',      '16.2'),\r\n                ('50',  '6.72',      '16.2'),\r\n                ('51',  '10.2',      '22.11'),\r\n                ('52',  '10.2',      '22.11'),\r\n                ('53',  '10.2',      '22.11'),\r\n                ('54',  '10.2',      '22.11'),\r\n                ('55',  '10.2',      '22.11'),\r\n                ('56',  '15.92',      '33.12'),\r\n                ('57',  '15.92',      '33.12'),\r\n                ('58',  '15.92',      '33.12'),\r\n                ('59',  '15.92',      '33.12'),\r\n                ('60',  '15.92',      '33.12'),\r\n                ('61',  '20.54',      '42.5'),\r\n                ('62',  '22.47',      '46.31'),\r\n                ('63',  '24.66',      '50.57'),\r\n                ('64',  '27.1',      '55.35'),\r\n                ('65',  '29.77',      '60.58'),\r\n                ('66',  '32.62',      '66.34'),\r\n                ('67',  '35.65',      '72.56'),\r\n                ('68',  '38.87',      '79.3'),\r\n                ('69',  '42.36',      '86.5'),\r\n                ('70',  '46.27',      '94.38'),\r\n                ('71',  '50.71',      '103.02'),\r\n                ('72',  '55.8',      '112.71'),\r\n                ('73',  '61.65',      '123.63'),\r\n                ('74',  '68.15',      '135.95'),\r\n                ('75',  '75.17',      '149.62'),\r\n                ('76',  '82.6',      '164.64'),\r\n                ('77',  '90.32',      '180.85'),\r\n                ('78',  '98.26',      '197.95'),\r\n                ('79',  '106.63',      '216.07'),\r\n                ('80',  '115.75',      '235.32'),\r\n                ('81',  '125.87',      '236.3'),\r\n                ('82',  '137.31',      '257.21'),\r\n                ('83',  '150.21',      '263.11'),\r\n                ('84',  '164.25',      '287.14'),\r\n                ('85',  '179.12',      '292.72');");
                });

            modelBuilder.Entity("Domain.Model.Dados.SafSuperLuxoPorIdade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Familiar")
                        .HasColumnType("double");

                    b.Property<int>("IdadeMaxima")
                        .HasColumnType("int");

                    b.Property<int>("IdadeMinima")
                        .HasColumnType("int");

                    b.Property<double>("Individual")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("SafSuperLuxoPorIdade");

                    b.ToSqlQuery("INSERT INTO SafSuperLuxoPorIdade (IdadeMinima, IdadeMaxima, Individual, Familiar) VALUES\r\n               ('16', '35', '1.99', '6.38'),\r\n               ('36', '40', '3.02', '8.61'),\r\n               ('41', '45', '4.53', '1.,52'),\r\n               ('46', '50', '6.72', '16.20'),\r\n               ('51', '55', '10.20', '22.11'),\r\n               ('56', '60', '15.92', '33.12'),\r\n               ('61', '61', '20.54', '42.50'),\r\n               ('62', '62', '22.47', '46.31'),\r\n               ('63', '63', '24.66', '50.57'),\r\n               ('64', '64', '27.10', '55.35'),\r\n               ('65', '65', '29.77', '60.58'),\r\n               ('66', '66', '32.62', '66.34'),\r\n               ('67', '67', '35.65', '72.56'),\r\n               ('68', '68', '38.87', '79.30'),\r\n               ('69', '69', '42.36', '86.50'),\r\n               ('70', '70', '46.27', '94.38'),\r\n               ('71', '71', '50.71', '103.02'),\r\n               ('72', '72', '55.80', '112.71'),\r\n               ('73', '73', '61.65', '123.63'),\r\n               ('74', '74', '68.15', '135.95'),\r\n               ('75', '75', '75.17', '149.62'),\r\n               ('76', '76', '82.60', '164.64'),\r\n               ('77', '77', '90.32', '180.85'),\r\n               ('78', '78', '98.26', '197.95'),\r\n               ('79', '79', '106.63', '216.07'),\r\n               ('80', '80', '115.75', '235.32'),\r\n               ('81', '81', '125.87', '236.30'),\r\n               ('82', '82', '137.31', '257.21'),\r\n               ('83', '83', '150.21', '263.11'),\r\n               ('84', '84', '164.25', '287.14'),\r\n               ('85', '85', '179.12', '292.72');");
                });

            modelBuilder.Entity("Domain.Model.Dados.TaxaPrevcom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<double>("Invalidez")
                        .HasColumnType("double");

                    b.Property<double>("Morte")
                        .HasColumnType("double");

                    b.Property<double>("PercentualReajusteInvalidez")
                        .HasColumnType("double");

                    b.Property<double>("PercentualReajusteMorte")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("TaxaPrevcom");

                    b.ToSqlQuery("INSERT INTO TaxaPrevcom(Idade,Morte,Invalidez,PercentualReajusteMorte,PercentualReajusteInvalidez) VALUES\r\n                    ('14',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('15',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('16',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('17',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('18',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('19',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('20',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('21',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('22',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('23',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('24',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('25',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('26',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('27',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('28',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('29',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('30',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('31',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('32',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('33',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('34',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('35',  '0.0000560',  '0.0000691',  '0',  '0'),\r\n                    ('36',  '0.0000921',  '0.0000905',  '64.55',  '31.05'),\r\n                    ('37',  '0.0000921',  '0.0000905',  '64.55',  '31.05'),\r\n                    ('38',  '0.0000921',  '0.0000905',  '64.55',  '31.05'),\r\n                    ('39',  '0.0000921',  '0.0000905',  '64.55',  '31.05'),\r\n                    ('40',  '0.0000921',  '0.0000905',  '64.55',  '31.05'),\r\n                    ('41',  '0.0001559',  '0.0001201',  '69.30',  '32.72'),\r\n                    ('42',  '0.0001559',  '0.0001201',  '69.30',  '32.72'),\r\n                    ('43',  '0.0001559',  '0.0001201',  '69.30',  '32.72'),\r\n                    ('44',  '0.0001559',  '0.0001201',  '69.30',  '32.72'),\r\n                    ('45',  '0.0001559',  '0.0001201',  '69.30',  '32.72'),\r\n                    ('46',  '0.0002764',  '0.0001790',  '77.25',  '49.01'),\r\n                    ('47',  '0.0002764',  '0.0001790',  '77.25',  '49.01'),\r\n                    ('48',  '0.0002764',  '0.0001790',  '77.25',  '49.01'),\r\n                    ('49',  '0.0002764',  '0.0001790',  '77.25',  '49.01'),\r\n                    ('50',  '0.0002764',  '0.0001790',  '77.25',  '49.01'),\r\n                    ('51',  '0.0004297',  '0.0002936',  '55.49',  '64.06'),\r\n                    ('52',  '0.0004297',  '0.0002936',  '55.49',  '64.06'),\r\n                    ('53',  '0.0004297',  '0.0002936',  '55.49',  '64.06'),\r\n                    ('54',  '0.0004297',  '0.0002936',  '55.49',  '64.06'),\r\n                    ('55',  '0.0004297',  '0.0002936',  '55.49',  '64.06'),\r\n                    ('56',  '0.0006027',  '0.0005153',  '40.25',  '75.47'),\r\n                    ('57',  '0.0006027',  '0.0005153',  '40.25',  '75.47'),\r\n                    ('58',  '0.0006027',  '0.0005153',  '40.25',  '75.47'),\r\n                    ('59',  '0.0006027',  '0.0005153',  '40.25',  '75.47'),\r\n                    ('60',  '0.0006027',  '0.0005153',  '40.25',  '75.47'),\r\n                    ('61',  '0.0008788',  '0.0009413',  '45.82',  '82.69'),\r\n                    ('62',  '0.0008788',  '0.0009413',  '45.82',  '82.69'),\r\n                    ('63',  '0.0008788',  '0.0009413',  '45.82',  '82.69'),\r\n                    ('64',  '0.0008788',  '0.0009413',  '45.82',  '82.69'),\r\n                    ('65',  '0.0008788',  '0.0009413',  '45.82',  '82.69'),\r\n                    ('66',  '0.0011739',  '0.0013672',  '33.57',  '45.24'),\r\n                    ('67',  '0.0012994',  '0.0015502',  '10.69',  '13.39'),\r\n                    ('68',  '0.0014397',  '0.0017587',  '10.80',  '13.45'),\r\n                    ('69',  '0.0015953',  '0.0019962',  '10.81',  '13.50'),\r\n                    ('70',  '0.0017668',  '0.0022666',  '10.75',  '13.55'),\r\n                    ('71',  '0.0019550',  '0.0025744',  '10.65',  '13.58'),\r\n                    ('72',  '0.0021602',  '0.0029250',  '10.50',  '13.62'),\r\n                    ('73',  '0.0023838',  '0.0033243',  '10.35',  '13.65'),\r\n                    ('74',  '0.0026284',  '0.0037787',  '10.26',  '13.67'),\r\n                    ('75',  '0.0028973',  '0.0042964',  '10.23',  '13.70'),\r\n                    ('76',  '0.0031937',  '0.0048859',  '10.23',  '13.72'),\r\n                    ('77',  '0.0035207',  '0.0055572',  '10.24',  '13.74'),\r\n                    ('78',  '0.0038816',  '0.0065580',  '10.25',  '18.01'),\r\n                    ('79',  '0.0042787',  '0.0071915',  '10.23',  '9.66'),\r\n                    ('80',  '0.0047142',  '0.0081825',  '10.18',  '13.78'),\r\n                    ('81',  '0.0051908',  '0.0093109',  '10.11',  '13.79'),\r\n                    ('82',  '0.0057110',  '0.0105958',  '10.02',  '13.80'),\r\n                    ('83',  '0.0062752',  '0.0120580',  '9.88',  '13.80'),\r\n                    ('84',  '0.0068808',  '0.0137232',  '9.65',  '13.81'),\r\n                    ('85',  '0.0075220',  '0.0156116',  '9.32',  '13.76'),\r\n                    ('86',  '0.0081945',  '0.0177769',  '8.94',  '13.87'),\r\n                    ('87',  '0.0088935',  '0.0202354',  '8.53',  '13.83'),\r\n                    ('88',  '0.0096157',  '0.0230340',  '8.12',  '13.83'),\r\n                    ('89',  '0.0103657',  '0.0262196',  '7.80',  '13.83'),\r\n                    ('90',  '0.0111504',  '0.0298458',  '7.57',  '13.83'),\r\n                    ('91',  '0.0119755',  '0.1184399',  '7.40',  '296.84'),\r\n                    ('92',  '0.0128485',  '0.1184399',  '7.29',  '0'),\r\n                    ('93',  '0.0137749',  '0.1184399',  '7.21',  '0'),\r\n                    ('94',  '0.0147598',  '0.1184399',  '7.15',  '0'),\r\n                    ('95',  '0.0158077',  '0.1184399',  '7.10',  '0'),\r\n                    ('96',  '0.0169238',  '0.1184399',  '7.06',  '0'),\r\n                    ('97',  '0.0181135',  '0.1184399',  '7.03',  '0'),\r\n                    ('98',  '0.0194050',  '0.1184399',  '7.13',  '0'),\r\n                    ('99',  '0.0208235',  '0.1184399',  '7.31',  '0'),\r\n                    ('100',  '0.0223957',  '0.1184399',  '7.55',  '0'),\r\n                    ('101',  '0.0241492',  '0.1184399',  '7.83',  '0'),\r\n                    ('102',  '0.0261102',  '0.1184399',  '8.12',  '0'),\r\n                    ('103',  '0.0283060',  '0.1184399',  '8.41',  '0'),\r\n                    ('104',  '0.0307630',  '0.1184399',  '8.68',  '0'),\r\n                    ('105',  '0.0335071',  '0.1184399',  '8.92',  '0'),\r\n                    ('106',  '0.0365662',  '0.1184399',  '9.13',  '0'),\r\n                    ('107',  '0.0399669',  '0.1184399',  '9.30',  '0'),\r\n                    ('108',  '0.0437358',  '0.1184399',  '9.43',  '0'),\r\n                    ('109',  '0.0478994',  '0.1184399',  '9.52',  '0'),\r\n                    ('110',  '0.0524834',  '0.1184399',  '9.57',  '0'),\r\n                    ('111',  '0.0575166',  '0.1184399',  '9.59',  '0'),\r\n                    ('112',  '0.0630267',  '0.1184399',  '9.58',  '0'),\r\n                    ('113',  '0.0690394',  '0.1184399',  '9.54',  '0'),\r\n                    ('114',  '0.0755774',  '0.1184399',  '9.47',  '0');");
                });

            modelBuilder.Entity("Domain.Model.Dados.TermLife", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Feminino10")
                        .HasColumnType("double");

                    b.Property<double>("Feminino15")
                        .HasColumnType("double");

                    b.Property<double>("Feminino20")
                        .HasColumnType("double");

                    b.Property<double>("Feminino25")
                        .HasColumnType("double");

                    b.Property<double>("Feminino30")
                        .HasColumnType("double");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<double>("Masculino10")
                        .HasColumnType("double");

                    b.Property<double>("Masculino15")
                        .HasColumnType("double");

                    b.Property<double>("Masculino20")
                        .HasColumnType("double");

                    b.Property<double>("Masculino25")
                        .HasColumnType("double");

                    b.Property<double>("Masculino30")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("TermLife");

                    b.ToSqlQuery("INSERT INTO TermLife (Idade, Masculino10, Masculino15, Masculino20, Masculino25, Masculino30, Feminino10, Feminino15, Feminino20, Feminino25, Feminino30) VALUES\r\n                        ('25',  '0.0974',          '0.1047',     '0.1169',  '0.13763',      '0.17086',    '0.04355',          '0.05132',        '0.06272',  '0.08008',  '0.10271'),\r\n                        ('26',  '0.09868',          '0.1074',     '0.12149',  '0.14528',      '0.18266',    '0.04597',          '0.05454',        '0.06726',  '0.08653',  '0.11099'),\r\n                        ('27',  '0.10048',          '0.11076',    '0.12686',  '0.15423',      '0.19579',    '0.04868',          '0.05829',        '0.07231',  '0.09363',  '0.12013'),\r\n                        ('28',  '0.10313',          '0.115',      '0.13315',  '0.16467',      '0.2105',       '0.0517',          '0.06256',        '0.07797',  '0.10135',  '0.13019'),\r\n                        ('29',  '0.10647',          '0.12004',    '0.14058',  '0.17669',      '0.22661',    '0.05498',          '0.06733',        '0.0843',  '0.10969',  '0.14124'),\r\n                        ('30',  '0.1102',          '0.12579',    '0.14897',  '0.18991',      '0.24465',    '0.05864',          '0.07255',        '0.09136',  '0.11877',  '0.15336'),\r\n                        ('31',  '0.11447',          '0.13229',    '0.15877',  '0.20475',      '0.26455',    '0.06275',          '0.07828',        '0.09913',  '0.12873',  '0.16668'),\r\n                        ('32',  '0.1195',          '0.13968',    '0.17007',  '0.22112',      '0.28651',    '0.06751',          '0.08458',        '0.10765',  '0.13969',  '0.18126'),\r\n                        ('33',  '0.12549',          '0.14805',    '0.18306',  '0.23932',      '0.31028',    '0.07291',          '0.09162',        '0.11687',  '0.15174',  '0.19722'),\r\n                        ('34',  '0.13217',          '0.15764',    '0.19778',  '0.25904',      '0.33624',    '0.0789',          '0.09947',        '0.12682',  '0.16495',  '0.21452'),\r\n                        ('35',  '0.13977',          '0.16845',    '0.21398',  '0.28111',      '0.36476',    '0.08541',          '0.1082',         '0.13761',  '0.17943',  '0.23327'),\r\n                        ('36',  '0.14836',          '0.18111',    '0.23217',  '0.30547',      '0.39577',    '0.0925',          '0.11779',        '0.14942',  '0.19533',  '0.25347'),\r\n                        ('37',  '0.15805',          '0.19568',    '0.2522',  '0.33234',      '0.42943',    '0.10034',          '0.12833',        '0.16246',  '0.21277',  '0.27535'),\r\n                        ('38',  '0.1687',          '0.21223',    '0.27429',  '0.36124',      '0.46544',    '0.10918',          '0.13974',        '0.17681',  '0.23188',  '0.29903'),\r\n                        ('39',  '0.18106',          '0.23108',    '0.29828',  '0.39287',      '0.50485',    '0.11918',          '0.1521',         '0.19261',  '0.25264',  '0.32484'),\r\n                        ('40',  '0.1951',          '0.25185',    '0.32519',  '0.42769',      '0.54757',    '0.13034',          '0.16547',        '0.20994',  '0.27515',  '0.35291'),\r\n                        ('41',  '0.21159',          '0.27512',    '0.35488',  '0.46552',      '0.59447',    '0.14251',          '0.18008',        '0.22893',  '0.29937',  '0.38347'),\r\n                        ('42',  '0.23051',          '0.30059',    '0.38753',  '0.50651',      '0.64607',    '0.15556',          '0.19596',        '0.24958',  '0.32547',  '0.41648'),\r\n                        ('43',  '0.25197',          '0.32861',    '0.4226',  '0.55033',      '0.70335',    '0.16938',          '0.21328',        '0.27209',  '0.35363',  '0.45235'),\r\n                        ('44',  '0.27647',          '0.35891',    '0.46095',  '0.59832',      '0.76709',    '0.18411',          '0.23223',        '0.29644',  '0.38425',  '0.49123'),\r\n                        ('45',  '0.30317',          '0.39278',    '0.50307',  '0.65028',      '0.83709',    '0.20006',          '0.25306',        '0.3229',  '0.41761',  '0.53425'),\r\n                        ('46',  '0.33314',          '0.4301',     '0.54885',  '0.70736',      '0.91163',    '0.2176',          '0.27602',        '0.35143',  '0.45404',  '0.58173'),\r\n                        ('47',  '0.36594',          '0.47119',    '0.59849',  '0.77027',      '0.99261',    '0.23693',          '0.30119',        '0.38232',  '0.49353',  '0.63434'),\r\n                        ('48',  '0.4022',          '0.51537',    '0.65169',  '0.84032',      '1.08068',    '0.25797',          '0.32859',        '0.41562',  '0.53643',  '0.69173'),\r\n                        ('49',  '0.44067',          '0.56323',    '0.70966',  '0.91812',      '1.17714',    '0.28079',          '0.35807',        '0.45176',  '0.58285',  '0.75489'),\r\n                        ('50',  '0.4837',          '0.61573',    '0.77242',  '1.00363',      '1.28021',    '0.30555',          '0.38983',        '0.49096',  '0.63411',  '0.82442'),\r\n                        ('51',  '0.52994',          '0.67188',    '0.84075',  '1.09411',      '1.39275',    '0.33277',          '0.42392',        '0.5337',  '0.69068',  '0.9014'),\r\n                        ('52',  '0.57986',          '0.73199',    '0.9155',  '1.19198',      '1.51433',    '0.36262',          '0.46078',        '0.58001',  '0.75344',  '0.98689'),\r\n                        ('53',  '0.63209',          '0.79541',    '0.99818',  '1.29796',      '1.64597',    '0.39567',          '0.50086',        '0.63059',  '0.82218',  '1.08221'),\r\n                        ('54',  '0.68795',          '0.86414',    '1.08981',  '1.41393',      '1.78603',    '0.43179',          '0.54482',        '0.68563',  '0.89823',  '1.18781'),\r\n                        ('55',  '0.74966',          '0.93873',    '1.19083',  '1.53794',      '1.93541',    '0.47111',          '0.59293',        '0.74674',  '0.98224',  '1.30358'),\r\n                        ('56',  '0.81559',          '1.02021',    '1.29766',  '1.67368',      '0',        '0.5131',          '0.64536',          '0.81414',  '1.07532',  '0'),\r\n                        ('57',  '0.88684',          '1.11016',    '1.41377',  '1.82094',      '0',        '0.55817',          '0.70185',          '0.88877',  '1.17867',  '0'),\r\n                        ('58',  '0.96184',          '1.21035',    '1.53972',  '1.98076',      '0',        '0.6065',          '0.76301',          '0.97009',  '1.29369',  '0'),\r\n                        ('59',  '1.04505',          '1.32313',    '1.67872',  '2.15171',      '0',        '0.6589',          '0.82888',          '1.05958',  '1.42082',  '0'),\r\n                        ('60',  '1.13331',          '1.44612',    '1.82591',  '2.33284',      '0',        '0.71572',          '0.90162',          '1.15802',  '1.5598',  '0'),\r\n                        ('61',  '1.22991',          '1.57536',    '1.98696',  '0',          '0',        '0.77712',          '0.98147',          '1.26666',  '0',      '0'),\r\n                        ('62',  '1.33569',          '1.71465',    '2.16068',  '0',          '0',        '0.84262',          '1.06973',          '1.387',  '0',      '0'),\r\n                        ('63',  '1.45584',          '1.86646',    '2.34979',  '0',          '0',        '0.91282',          '1.16526',          '1.52049',  '0',      '0'),\r\n                        ('64',  '1.59051',          '2.03262',    '2.55024',  '0',          '0',        '0.98806',          '1.2703',          '1.66777',  '0',      '0'),\r\n                        ('65',  '1.73719',          '2.2069',     '2.76131',  '0',          '0',        '1.07133',          '1.38548',          '1.82809',  '0',      '0'),\r\n                        ('66',  '1.88921',          '2.39707',    '0',      '0',          '0',        '1.16335',          '1.51271',          '0',      '0',      '0'),\r\n                        ('67',  '2.05208',          '2.6008',     '0',      '0',          '0',        '1.26501',          '1.65301',          '0',      '0',      '0'),\r\n                        ('68',  '2.22818',          '2.82061',    '0',      '0',          '0',        '1.37394',          '1.80774',          '0',      '0',      '0'),\r\n                        ('69',  '2.41683',          '3.04771',    '0',      '0',          '0',        '1.4912',          '1.97565',          '0',      '0',      '0'),\r\n                        ('70',  '2.60939',          '3.2815',     '0',      '0',          '0',        '1.61653',          '2.15429',          '0',      '0',      '0'),\r\n                        ('71',  '2.86828',          '0',          '0',      '0',          '0',        '1.78593',          '0',              '0',      '0',      '0'),\r\n                        ('72',  '3.15272',          '0',          '0',      '0',          '0',        '1.98053',          '0',              '0',      '0',      '0'),\r\n                        ('73',  '3.46399',          '0',          '0',      '0',          '0',        '2.2046',          '0',              '0',      '0',      '0'),\r\n                        ('74',  '3.79505',          '0',          '0',      '0',          '0',        '2.46169',          '0',              '0',      '0',      '0'),\r\n                        ('75',  '4.15114',          '0',          '0',      '0',          '0',        '2.749',          '0',              '0',      '0',      '0');");
                });

            modelBuilder.Entity("Domain.Model.Dados.VidaInteira", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Homem")
                        .HasColumnType("double");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<double>("Mulher")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("VidaInteira");

                    b.ToSqlQuery("INSERT INTO VidaInteira(Idade,Homem,Mulher) VALUES\r\n                ('16',  '0.23',  '0.21'),\r\n                ('17',  '0.23',  '0.21'),\r\n                ('18',  '0.23',  '0.21'),\r\n                ('19',  '0.23',  '0.21'),\r\n                ('20',  '0.23',  '0.21'),\r\n                ('21',  '0.23',  '0.21'),\r\n                ('22',  '0.23',  '0.21'),\r\n                ('23',  '0.23',  '0.21'),\r\n                ('24',  '0.23',  '0.21'),\r\n                ('25',  '0.23',  '0.21'),\r\n                ('26',  '0.23',  '0.21'),\r\n                ('27',  '0.23',  '0.21'),\r\n                ('28',  '0.23',  '0.21'),\r\n                ('29',  '0.23',  '0.21'),\r\n                ('30',  '0.23',  '0.21'),\r\n                ('31',  '0.28',  '0.25'),\r\n                ('32',  '0.28',  '0.25'),\r\n                ('33',  '0.28',  '0.25'),\r\n                ('34',  '0.28',  '0.25'),\r\n                ('35',  '0.28',  '0.25'),\r\n                ('36',  '0.36',  '0.32'),\r\n                ('37',  '0.36',  '0.32'),\r\n                ('38',  '0.36',  '0.32'),\r\n                ('39',  '0.36',  '0.32'),\r\n                ('40',  '0.36',  '0.32'),\r\n                ('41',  '0.54',  '0.49'),\r\n                ('42',  '0.54',  '0.49'),\r\n                ('43',  '0.54',  '0.49'),\r\n                ('44',  '0.54',  '0.49'),\r\n                ('45',  '0.54',  '0.49'),\r\n                ('46',  '0.83',  '0.75'),\r\n                ('47',  '0.83',  '0.75'),\r\n                ('48',  '0.83',  '0.75'),\r\n                ('49',  '0.83',  '0.75'),\r\n                ('50',  '0.83',  '0.75'),\r\n                ('51',  '1.3',  '1.17'),\r\n                ('52',  '1.3',  '1.17'),\r\n                ('53',  '1.3',  '1.17'),\r\n                ('54',  '1.3',  '1.17'),\r\n                ('55',  '1.3',  '1.17'),\r\n                ('56',  '2.03',  '1.83'),\r\n                ('57',  '2.03',  '1.83'),\r\n                ('58',  '2.03',  '1.83'),\r\n                ('59',  '2.03',  '1.83'),\r\n                ('60',  '2.03',  '1.83'),\r\n                ('61',  '2.66',  '2.39'),\r\n                ('62',  '2.91',  '2.61'),\r\n                ('63',  '3.18',  '2.86'),\r\n                ('64',  '3.47',  '3.12'),\r\n                ('65',  '3.79',  '3.41'),\r\n                ('66',  '4.15',  '3.74'),\r\n                ('67',  '4.55',  '4.09'),\r\n                ('68',  '4.98',  '4.48'),\r\n                ('69',  '5.45',  '4.91'),\r\n                ('70',  '5.95',  '5.35'),\r\n                ('71',  '6.47',  '5.82'),\r\n                ('72',  '7.01',  '6.31'),\r\n                ('73',  '7.56',  '6.8'),\r\n                ('74',  '8.14',  '7.33'),\r\n                ('75',  '8.77',  '7.89'),\r\n                ('76',  '9.46',  '8.52'),\r\n                ('77',  '10.24','9.22'),\r\n                ('78',  '11.12','10.01'),\r\n                ('79',  '12.09','10.88'),\r\n                ('80',  '13.14','11.83'),\r\n                ('81',  '14.26','12.84'),\r\n                ('82',  '15.44','13.89'),\r\n                ('83',  '16.66','14.99'),\r\n                ('84',  '17.93','16.13'),\r\n                ('85',  '19.26','17.33');");
                });

            modelBuilder.Entity("Domain.Model.Dados.VidaInteiraConjuge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Homem")
                        .HasColumnType("double");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<double>("Mulher")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("VidaInteiraConjuge");

                    b.ToSqlQuery("INSERT INTO VidaInteiraConjuge(Idade, Homem, Mulher) VALUES\r\n                ('16',  '0.19',  '0.17'),\r\n                ('17',  '0.19',  '0.17'),\r\n                ('18',  '0.19',  '0.17'),\r\n                ('19',  '0.19',  '0.17'),\r\n                ('20',  '0.19',  '0.17'),\r\n                ('21',  '0.19',  '0.17'),\r\n                ('22',  '0.19',  '0.17'),\r\n                ('23',  '0.19',  '0.17'),\r\n                ('24',  '0.19',  '0.17'),\r\n                ('25',  '0.19',  '0.17'),\r\n                ('26',  '0.19',  '0.17'),\r\n                ('27',  '0.19',  '0.17'),\r\n                ('28',  '0.19',  '0.17'),\r\n                ('29',  '0.19',  '0.17'),\r\n                ('30',  '0.19',  '0.17'),\r\n                ('31',  '0.23',  '0.2'),\r\n                ('32',  '0.23',  '0.2'),\r\n                ('33',  '0.23',  '0.2'),\r\n                ('34',  '0.23',  '0.2'),\r\n                ('35',  '0.23',  '0.2'),\r\n                ('36',  '0.3',  '0.27'),\r\n                ('37',  '0.3',  '0.27'),\r\n                ('38',  '0.3',  '0.27'),\r\n                ('39',  '0.3',  '0.27'),\r\n                ('40',  '0.3',  '0.27'),\r\n                ('41',  '0.44',  '0.4'),\r\n                ('42',  '0.44',  '0.4'),\r\n                ('43',  '0.44',  '0.4'),\r\n                ('44',  '0.44',  '0.4'),\r\n                ('45',  '0.44',  '0.4'),\r\n                ('46',  '0.68',  '0.61'),\r\n                ('47',  '0.68',  '0.61'),\r\n                ('48',  '0.68',  '0.61'),\r\n                ('49',  '0.68',  '0.61'),\r\n                ('50',  '0.68',  '0.61'),\r\n                ('51',  '1.07',  '0.96'),\r\n                ('52',  '1.07',  '0.96'),\r\n                ('53',  '1.07',  '0.96'),\r\n                ('54',  '1.07',  '0.96'),\r\n                ('55',  '1.07',  '0.96'),\r\n                ('56',  '1.67',  '1.5'),\r\n                ('57',  '1.67',  '1.5'),\r\n                ('58',  '1.67',  '1.5'),\r\n                ('59',  '1.67',  '1.5'),\r\n                ('60',  '1.67',  '1.5'),\r\n                ('61',  '2.18',  '1.96'),\r\n                ('62',  '2.38',  '2.15'),\r\n                ('63',  '2.6',  '2.34'),\r\n                ('64',  '2.85',  '2.56'),\r\n                ('65',  '3.11',  '2.8'),\r\n                ('66',  '3.41',  '3.07'),\r\n                ('67',  '3.73',  '3.36'),\r\n                ('68',  '4.09',  '3.68'),\r\n                ('69',  '4.47',  '4.02'),\r\n                ('70',  '4.88',  '4.39'),\r\n                ('71',  '5.31',  '4.78'),\r\n                ('72',  '5.75',  '5.17'),\r\n                ('73',  '6.2',  '5.78'),\r\n                ('74',  '6.68',  '6.01'),\r\n                ('75',  '7.19',  '6.47'),\r\n                ('76',  '7.76',  '6.99'),\r\n                ('77',  '8.4',  '7.56'),\r\n                ('78',  '9.12',  '8.21'),\r\n                ('79',  '9.92',  '8.93'),\r\n                ('80',  '10.78',  '9.7'),\r\n                ('81',  '11.7',  '10.53'),\r\n                ('82',  '12.66',  '11.4'),\r\n                ('83',  '13.66',  '12.3'),\r\n                ('84',  '14.71', '13.24'),\r\n                ('85',  '15.8',   '14.22');");
                });

            modelBuilder.Entity("Domain.Model.Documento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CadastroId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataExpedicao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Numero")
                        .HasColumnType("longtext");

                    b.Property<string>("OrgaoExpedidor")
                        .HasColumnType("longtext");

                    b.Property<string>("Tipo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Documentos");
                });

            modelBuilder.Entity("Domain.Model.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bairro")
                        .HasColumnType("longtext");

                    b.Property<int>("CadastroId")
                        .HasColumnType("int");

                    b.Property<string>("Cep")
                        .HasColumnType("longtext");

                    b.Property<string>("Cidade")
                        .HasColumnType("longtext");

                    b.Property<string>("Complemento")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Logadouro")
                        .HasColumnType("longtext");

                    b.Property<string>("Numero")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("Domain.Model.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DataAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<int>("Permissao")
                        .HasColumnType("int");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Telefone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
